@page "/capteurs"
@inject Client_SAE_5.ViewModel.CapteurViewModel CapteurViewModel

<PageTitle>Gestion des Capteurs</PageTitle>

<h1>Gestion des Capteurs</h1>

@if (CapteurViewModel.Capteurs == null || CapteurViewModel.Capteurs.Count == 0)
{
    <p><em>Chargement des capteurs ou aucun capteur trouvée...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Nom</th>
                <th>Salle</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var capteur in CapteurViewModel.Capteurs)
            {
                <tr>
                    <td>@capteur.NomCapteur</td>
                    <td>@capteur.NomSalle</td>
                    <td>
                        <button class="btn btn-info" @onclick="() => ViewDetails(capteur.IdCapteur)">Détails</button>
                        <button class="btn btn-primary" @onclick="() => EditCapteur(capteur)">Modifier</button>
                        <button class="btn btn-danger" @onclick="() => DeleteCapteur(capteur.IdCapteur)">Supprimer</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@if (CapteurViewModel.SelectedCatpeurDetails != null)
{
    <h2>Détails du capteur</h2>
    <p><strong>Nom :</strong> @CapteurViewModel.SelectedCatpeurDetails.NomCapteur</p>
    <p><strong>Est actif :</strong> @CapteurViewModel.SelectedCatpeurDetails.EstActif</p>
    <p><strong>X :</strong> @CapteurViewModel.SelectedCatpeurDetails.XCapteur</p>
    <p><strong>Y :</strong> @CapteurViewModel.SelectedCatpeurDetails.YCapteur</p>
    <p><strong>Z :</strong> @CapteurViewModel.SelectedCatpeurDetails.ZCapteur</p>

    <h3>Unitée</h3>
    @if (CapteurViewModel.SelectedCatpeurDetails.Unites?.Count > 0)
    {
        <ul>
            @foreach (var unite in CapteurViewModel.SelectedCatpeurDetails.Unites)
            {
                <li>@unite.NomUnite</li>
                <button class="btn btn-danger" @onclick="() => DeleteUniteCapteur(unite.IdUnite, CapteurViewModel.SelectedCatpeurDetails.IdCapteur)">Supprimer</button>
            }
        </ul>
    }
    else
    {
        <p><em>Aucune unitée</em></p>
    }

    <h3>Mur</h3>
    @if (CapteurViewModel.SelectedCatpeurDetails.Mur != null)
    {
        <p><strong>Hauteur : </strong><li>@CapteurViewModel.SelectedCatpeurDetails.Mur.Hauteur</li></p>
        <p><strong>Longueur : </strong><li>@CapteurViewModel.SelectedCatpeurDetails.Mur.Longueur</li></p>
        <p><strong>Orientation : </strong><li>@CapteurViewModel.SelectedCatpeurDetails.Mur.Orientation</li></p>
    }
    else
    {
        <p><em>Le capteur n'est pas sur un mur</em></p>
    }

    <h3>Salle</h3>
    @if (CapteurViewModel.SelectedCatpeurDetails.Salle != null)
    {
        <p><strong>Nom salle : </strong><li>@CapteurViewModel.SelectedCatpeurDetails.Salle.NomSalle</li></p>
    }
    else
    {
        <p><em>Le capteur n'a pas de salle</em></p>
    }
}

<h2>Ajouter ou Modifier un capteur</h2>
<div>
    <label>Nom :</label>
    <input type="text" @bind="CapteurViewModel.EditableCapteur.NomCapteur" class="form-control" />

    <label>Est actif ? :</label>

    <label>OUI</label>
    <input type="radio" checked="@(CapteurViewModel.EditableCapteur.EstActif == "OUI")" name="OUI" @onchange="@(() => CapteurViewModel.EditableCapteur.EstActif = "OUI")" />
    <label>NON</label>
    <input type="radio" checked="@(CapteurViewModel.EditableCapteur.EstActif == "NON")" name="NON" @onchange="@(() => CapteurViewModel.EditableCapteur.EstActif = "NON")" />
    <label>NSP</label>
    <input type="radio" checked="@(CapteurViewModel.EditableCapteur.EstActif == "NSP")" name="NSP" @onchange="@(() => CapteurViewModel.EditableCapteur.EstActif = "NSP")" />

    <label>X :</label>
    <input type="number" @bind="CapteurViewModel.EditableCapteur.XCapteur" class="form-control" />

    <label>Y :</label>
    <input type="number" @bind="CapteurViewModel.EditableCapteur.YCapteur" class="form-control" />

    <label>Z :</label>
    <input type="number" @bind="CapteurViewModel.EditableCapteur.ZCapteur" class="form-control" />

    <label>Mur :</label>
    <select @bind="CapteurViewModel.EditableCapteur.IdMur" class="form-control">
        <option value="">-- Sélectionnez un mur --</option>
        @foreach (var mur in CapteurViewModel.Murs)
        {
            <option value="@mur.IdMur">@mur.Direction @mur.Orientation @mur.NomSalle</option>
        }
    </select>

    <button class="btn btn-success" @onclick="SaveCapteur">Enregistrer</button>
    <button class="btn btn-secondary" @onclick="CancelEdit">Annuler</button>
    <h2>Ajouter une unitée</h2>
    <select class="form-control" @onchange="(e) => AddUniteCapteur(CapteurViewModel.EditableCapteur.IdCapteur, e.Value)">
        <option value="">-- Ajouter une unité --</option>
        @foreach (var unite in CapteurViewModel.AvailableUnites)
        {
            <option value="@unite.IdUnite">@unite.NomUnite</option>
        }
    </select>
</div>

@if (!string.IsNullOrEmpty(CapteurViewModel.ErrorMessage))
{
    <div class="alert alert-danger">
        @CapteurViewModel.ErrorMessage
    </div>
}

@code {
    protected override async Task OnInitializedAsync()
    {
        await CapteurViewModel.LoadCapteursAsync();
        await CapteurViewModel.LoadMursAsync();
    }

    private async Task ViewDetails(int idCapteur)
    {
        await CapteurViewModel.LoadCapteurDetailsAsync(idCapteur);
        StateHasChanged();
    }

    private async Task EditCapteur(Client_SAE_5.DTO.CapteurDTO capteur)
    {
        var temp = await CapteurViewModel.LoadCapteurDetailsWithoutDefAsync(capteur.IdCapteur);
        CapteurViewModel.EditCapteur(temp);
    }

    private async Task SaveCapteur()
    {
        if (CapteurViewModel.EditableCapteur.IdCapteur == 0)
        {
            await CapteurViewModel.AddCapteurAsync();
        }
        else
        {
            await CapteurViewModel.UpdateCapteurAsync();
        }
        CapteurViewModel.EditableCapteur = new Client_SAE_5.DTO.CapteurSansNavigationDTO(); // Réinitialiser
    }

    private async Task DeleteCapteur(int idCapteur)
    {
        await CapteurViewModel.DeleteCapteurAsync(idCapteur);
    }

    private void CancelEdit()
    {
        CapteurViewModel.EditableCapteur = new Client_SAE_5.DTO.CapteurSansNavigationDTO();
        CapteurViewModel.AvailableUnites.Clear();
    }

    private async Task AddUniteCapteur(int idCapteur, object idUnite)
    {
        if (idUnite is int idUniteInt || (idUnite is string strValue && int.TryParse(strValue, out idUniteInt)))
        {
            if (idUniteInt > 0)
            {
                await CapteurViewModel.AddUniteCapteurAsync(idCapteur, idUniteInt);
            }
        }
    }

    private async Task DeleteUniteCapteur(int idUnite, int idCapteur)
    {
        await CapteurViewModel.DeleteUniteCapteurAsync(idUnite, idCapteur);
    }
}
