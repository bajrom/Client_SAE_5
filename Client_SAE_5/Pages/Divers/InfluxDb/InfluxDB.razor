@page "/influxdb"
@inject Client_SAE_5.ViewModel.InfluxViewModel InfluxViewModel
@using Client_SAE_5.Models.InfluxDB


<PageTitle>Visualisation données capteurs</PageTitle>

<h1>Données des capteurs :</h1>

<select @onchange="(e) => ChangeCapteurData((string)e.Value)" class="form-control">
    @if (string.IsNullOrEmpty(InfluxViewModel.SelectedCapteurName))
    {
        <option value="">-- Sélectionnez un capteur --</option>
    }
    @foreach (string nomCapteur in InfluxViewModel.NomCapteurs)
    {
        <option value="@nomCapteur">@nomCapteur</option>
    }

</select>

@if (string.IsNullOrEmpty(InfluxViewModel.SelectedCapteurName))
{
    <p>toutes les vals</p>
}

else
{
    <h2>Valeurs actuelles :</h2>

    <p>Présence de vibrations : @(InfluxViewModel.ActualVibration != 0 ? "oui" : "non")</p>
    <p>Température intérieure : @(InfluxViewModel.ActualTemperatureInt)°C</p>
    <p>Température extérieure : @(InfluxViewModel.ActualTemperatureExt)°C</p>
    <p>Taux d'humidité : @(InfluxViewModel.ActualHumidite)%</p>
    <p>Taux de CO2 : @(InfluxViewModel.ActualTauxCo2)ppm</p>
    <p>Présence de mouvement : @(InfluxViewModel.ActualPresenceMouvement != 0 ? "oui" : "non")</p>
    <p>Présence de fumée : @(InfluxViewModel.ActualPresenceFumee != 0 ? "oui" : "non")</p>
    <p>Taux de luminosité : @(InfluxViewModel.ActualLuminosite)lm</p>
    <p>Présence de bruit : @(InfluxViewModel.ActualPresenceBruit != 0 ? "oui" : "non")</p>

    <h2>Prédictions :</h2>

    <p>État de la fenêtre : @(InfluxViewModel.PredFenetreOuverte ? "ouverte" : "fermée")</p>

    @foreach(InfluxDataReturn data in InfluxViewModel.TemperaturesInTimeInterval)
    {
        <p>@data.value à @data.time</p>
    }
}

@code{

    protected override async Task OnInitializedAsync()
    {
        await InfluxViewModel.LoadNomCapteurs();
    }

    private async Task ChangeCapteurData(string newCapteurName)
    {
        //await InfluxViewModel.LoadPredictionsOfCapteurAsync(newCapteurName);
        await InfluxViewModel.LoadActualValuesOfCapteurAsync(newCapteurName);
        await InfluxViewModel.LoadGeneralValuesOfCapteurAsync(newCapteurName);
        InfluxViewModel.SelectedCapteurName = newCapteurName;
        StateHasChanged();
    }

}