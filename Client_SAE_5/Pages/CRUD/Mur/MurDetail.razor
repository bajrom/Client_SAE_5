@page "/crud/murs/{idMur:int}"
@inject NavigationManager NavigationManager
@inject Client_SAE_5.ViewModel.MurViewModel MurViewModel

@if (MurViewModel.SelectedMurDetails == null)
{
    <p><em><Spinner></Spinner></em></p>
}
else
{
    <h2>Détails du mur @(Math.Round(MurViewModel.SelectedMurDetails.Orientation,2))° @(MurViewModel.SelectedMurDetails.DirectionNavigation.LettresDirection) en @(MurViewModel.SelectedMurDetails.SalleNavigation.NomSalle) </h2>
    <p><strong>Longueur :</strong> @MurViewModel.SelectedMurDetails.Longueur cm</p>
    <p><strong>Hauteur :</strong> @MurViewModel.SelectedMurDetails.Hauteur cm</p>

    <h3>Orientation</h3>
    @if (MurViewModel.SelectedMurDetails.Orientation != null)
    {
        <p><strong>Orientation :</strong> @(Math.Round(MurViewModel.SelectedMurDetails.Orientation,2))° @MurViewModel.SelectedMurDetails.DirectionNavigation.LettresDirection</p>
    }
    else
    {
        <p><em>Aucune direction associée</em></p>
    }

    <h3>Capteurs</h3>
    @if (MurViewModel.SelectedMurDetails.Capteurs?.Count > 0)
    {
        <ul id="Murs_ListeCapteurs">
            @foreach (var capteur in MurViewModel.SelectedMurDetails.Capteurs)
            {
                <a href="/crud/capteurs/@(capteur.IdCapteur)">
                    <li>@capteur.NomCapteur</li>
                </a>

            }
        </ul>
    }
    else
    {
        <p><em>Aucune capteur associée</em></p>
    }

    <h3>Équipements</h3>
    @if (MurViewModel.SelectedMurDetails.Equipements?.Count > 0)
    {
        <ul id="Murs_ListeEquipements">
            @foreach (EquipementSansNavigationDTO equipement in MurViewModel.SelectedMurDetails.Equipements)
            {
                <a href="/crud/equipements/@(equipement.IdEquipement)">
                    <li>@equipement.NomEquipement</li>
                </a>
            }
        </ul>
    }
    else
    {
        <p><em>Aucun équipement associé</em></p>
    }
    <br />
    <Button class="btn btn-secondary mt-4" @onclick="GoBack">Annuler</Button>


}

<span>
    <h1>Position des capteurs et équipements sur le mur</h1>
    <div id="cadreMur" style="position: relative; width: @(MurLargeurPx + "px"); height: @(MurHauteurPx + "px"); border: 1px solid black;">
        @if (MurViewModel.SelectedMurDetails != null)
        {
        @if (MurViewModel.SelectedMurDetails.Capteurs != null && MurViewModel.SelectedMurDetails.Capteurs.Count > 0)
            {
                @foreach (var capteur in MurViewModel.SelectedMurDetails.Capteurs)
                {
                    <div style="position: absolute; width: @(CapteurLargeurPx)px; height: @(CapteurHauteurPx)px; background-color: blue; border-radius: 5%; @GetCapteurPositionStyle(capteur)"
                         title="Capteur: @capteur.NomCapteur (@capteur.XCapteur cm, @capteur.YCapteur cm)">
                    </div>
                }
            }

            @if (MurViewModel.SelectedMurDetails.Equipements != null && MurViewModel.SelectedMurDetails.Equipements.Count > 0)
            {
                @foreach (var equipement in MurViewModel.SelectedMurDetails.Equipements)
                {
                    <div style="position: absolute; 
                                width: @((equipement.Longueur * ScaleX).ToString(System.Globalization.CultureInfo.InvariantCulture))px; 
                                height: @((equipement.Hauteur * ScaleY).ToString(System.Globalization.CultureInfo.InvariantCulture))px;
                                background-color: @(GetEquipementColor(equipement.IdTypeEquipement));
                                @GetEquipementPositionStyle(equipement)"
                         title="Équipement: @equipement.NomEquipement (@equipement.XEquipement cm, @equipement.YEquipement cm)">
                    </div>
                }
            }
        }
        else
        {
            <p><em>Les détails du mur ne sont pas disponibles.</em></p>
        }
    </div>
</span>

@code {
    [Parameter]
    public int IdMur { get; set; }

    private const int TAILLE_CAPTEUR_PX = 10;

    // Dimensions du mur en pixels
    private int MurLargeurPx => ((int?)(MurViewModel.SelectedMurDetails?.Longueur)) ?? 575;
    private int MurHauteurPx => ((int?)(MurViewModel.SelectedMurDetails?.Hauteur)) ?? 270;

    // Échelle pour convertir cm -> pixels
    private decimal ScaleX => MurViewModel.SelectedMurDetails?.Longueur > 0
        ? MurLargeurPx / MurViewModel.SelectedMurDetails.Longueur
        : 1; // Gérer les divisions par zéro
    private decimal ScaleY => MurViewModel.SelectedMurDetails?.Hauteur > 0
        ? MurHauteurPx / MurViewModel.SelectedMurDetails.Hauteur
        : 1;

    // Dimensions d'un capteur (exemple arbitraire)
    private const int CapteurLargeurPx = TAILLE_CAPTEUR_PX;
    private const int CapteurHauteurPx = TAILLE_CAPTEUR_PX;

    /// <summary>
    /// Fonction permettant de récupérer la position d'un capteur
    /// </summary>
    /// <param name="capteur">Capteur dont on veut récupérer la position</param>
    /// <returns>Les attributs CSS correspondant à la position du capteur par rapport au mur.</returns>
    private string GetCapteurPositionStyle(CapteurSansNavigationDTO capteur)
    {
        if (capteur == null || MurViewModel.SelectedMurDetails == null) return "";

        // Convertir les coordonnées des capteurs en pixels
        decimal leftPx = capteur.XCapteur * ScaleX;
        decimal topPx = capteur.YCapteur * ScaleY;

        return $"left: {leftPx.ToString(System.Globalization.CultureInfo.InvariantCulture)}px; " +
               $"top: {topPx.ToString(System.Globalization.CultureInfo.InvariantCulture)}px;";
    }

    /// <summary>
    /// Fonction permettant de récupérer la position d'un équipement sur un mur
    /// </summary>
    /// <param name="equipement">Equipement dont on veut récupérer la position</param>
    /// <returns>Les attributs CSS correspondant à la position de l'équipement par rapport au mur</returns>
    private string GetEquipementPositionStyle(EquipementSansNavigationDTO equipement)
    {
        if (equipement == null || MurViewModel.SelectedMurDetails == null) return "";

        // Convertir les coordonnées des équipements en pixels
        decimal leftPx = equipement.XEquipement * ScaleX;
        decimal topPx = equipement.YEquipement * ScaleY;

        return $"left: {leftPx.ToString(System.Globalization.CultureInfo.InvariantCulture)}px; " +
               $"top: {topPx.ToString(System.Globalization.CultureInfo.InvariantCulture)}px;";
    }

    /// <summary>
    /// Récupère la couleur de l'équipement au mur
    /// </summary>
    /// <param name="typeEquipementSansNavigationDTO">ID du type d'équipement</param>
    /// <returns>Une couleur CSS</returns>
    private string GetEquipementColor(int typeEquipementSansNavigationDTO)
    {
        switch (typeEquipementSansNavigationDTO)
        {
            case 2:
                return "gray";
            case 3:
                return "lightgray";
            case 1:
                return "lightgray";
            case 5:
                return "brown";
            default:
                return "black";
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await MurViewModel.LoadMurDetailsAsync(IdMur);
    }

        private void GoBack()
        {
            NavigationManager.NavigateTo("/crud/equipements");
        }
}