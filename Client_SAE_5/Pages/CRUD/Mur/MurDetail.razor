@page "/crud/murs/{idMur:int}"
@inject NavigationManager NavigationManager
@inject Client_SAE_5.ViewModel.MurViewModel MurViewModel

<link rel="stylesheet" href="css/MurStyle.css" />
<link rel="stylesheet" href="css/DetailPages.css" />

<PageTitle>Détails du mur</PageTitle>

<h3>Détails du mur</h3>
<br />
@if (MurViewModel.SelectedMurDetails == null)
{
    <p id="chargementPageContainer"><Spinner></Spinner> <p id="texteChargementDetail">Détails du mur en chargement...</p></p>
}
else
{
    <div id="contentContainer">
        <div>
            <h5>
                Localisation: @(RenderOrientationEtSalle(MurViewModel.SelectedMurDetails.Orientation,
                                                         MurViewModel.SelectedMurDetails.DirectionNavigation,
                                                         MurViewModel.SelectedMurDetails.SalleNavigation)) 
            </h5>
            <h5>Longueur: @(Math.Round(MurViewModel.SelectedMurDetails.Longueur/100,2))m</h5>
            <h5>Hauteur: @(Math.Round(MurViewModel.SelectedMurDetails.Hauteur/100,2))m</h5>

            <br />
            <h5>Capteurs</h5>
            @if (MurViewModel.SelectedMurDetails.Capteurs?.Count > 0)
            {
                <ul id="Murs_ListeCapteurs">
                    @foreach (var capteur in MurViewModel.SelectedMurDetails.Capteurs)
                    {
                        <li class="listeCliquable" @onclick="@(e => Utils.Utils.GoDetail(NavigationManager, "capteurs", capteur.IdCapteur))">@capteur.NomCapteur</li>
                    }
                </ul>
            } else { <p><em>Aucun capteur associée</em></p> }

            <br />
            <h5>Équipements</h5>
            @if (MurViewModel.SelectedMurDetails.Equipements?.Count > 0)
            {
                <ul id="Murs_ListeEquipements">
                    @foreach (EquipementSansNavigationDTO equipement in MurViewModel.SelectedMurDetails.Equipements)
                    {
                        <li class="listeCliquable" @onclick="@(e => Utils.Utils.GoDetail(NavigationManager, "equipements", equipement.IdEquipement))">@equipement.NomEquipement</li>
                    }
                </ul>
            }
            else { <p><em>Aucun équipement associé</em></p> }
            <br /> 
        </div>


        <div>
            <h1>Position des objets sur le mur</h1>
            <div id="cadreMur" style="width: @(MurLargeurPx + "px"); height: @(MurHauteurPx + "px");">
                @if (MurViewModel.SelectedMurDetails != null)
                {
                @if (MurViewModel.SelectedMurDetails.Capteurs != null && MurViewModel.SelectedMurDetails.Capteurs.Count > 0)
                    {
                        @foreach (var capteur in MurViewModel.SelectedMurDetails.Capteurs)
                        {
                            <div class="capteurMurSchema" style="width: @(CapteurLargeurPx)px; height: @(CapteurHauteurPx)px; @GetCapteurPositionStyle(capteur)"
                                 title="Capteur: @capteur.NomCapteur (@capteur.XCapteur cm, @capteur.YCapteur cm)"
                                 @onclick="@(e => Utils.Utils.GoDetail(NavigationManager, "capteurs", capteur.IdCapteur))">
                            </div>
                        }
                    }

                    @if (MurViewModel.SelectedMurDetails.Equipements != null && MurViewModel.SelectedMurDetails.Equipements.Count > 0)
                    {
                        @foreach (var equipement in MurViewModel.SelectedMurDetails.Equipements)
                        {
                            <div class="equipementMurSchema" style="
                                        width: @((equipement.Longueur * ScaleX).ToString(System.Globalization.CultureInfo.InvariantCulture))px; 
                                        height: @((equipement.Hauteur * ScaleY).ToString(System.Globalization.CultureInfo.InvariantCulture))px;
                                        background-color: @(GetEquipementColor(equipement.IdTypeEquipement));
                                        @GetEquipementPositionStyle(equipement)"
                                        @onclick="@(e => Utils.Utils.GoDetail(NavigationManager, "equipements", equipement.IdEquipement))"
                                 title="Équipement: @equipement.NomEquipement (@equipement.XEquipement cm, @equipement.YEquipement cm)">
                            </div>
                        }
                    }
                }
                else
                {
                    <p><em>Les détails du mur ne sont pas disponibles.</em></p>
                }
            </div>
        </div>
    </div>
}

<Button class="btn btn-secondary mt-4" @onclick="GoBack">Annuler</Button>

@code {
    [Parameter]
    public int IdMur { get; set; }

    private const int TAILLE_CAPTEUR_PX = 10;

    // Dimensions du mur en pixels
    private int MurLargeurPx => ((int?)(MurViewModel.SelectedMurDetails?.Longueur)) ?? 575;
    private int MurHauteurPx => ((int?)(MurViewModel.SelectedMurDetails?.Hauteur)) ?? 270;

    // Échelle pour convertir cm -> pixels
    private decimal ScaleX => MurViewModel.SelectedMurDetails?.Longueur > 0
        ? MurLargeurPx / MurViewModel.SelectedMurDetails.Longueur
        : 1; // Gérer les divisions par zéro
    private decimal ScaleY => MurViewModel.SelectedMurDetails?.Hauteur > 0
        ? MurHauteurPx / MurViewModel.SelectedMurDetails.Hauteur
        : 1;

    // Dimensions d'un capteur (exemple arbitraire)
    private const int CapteurLargeurPx = TAILLE_CAPTEUR_PX;
    private const int CapteurHauteurPx = TAILLE_CAPTEUR_PX;




    /// <summary>
    /// Fonction permettant de récupérer la position d'un capteur
    /// </summary>
    /// <param name="capteur">Capteur dont on veut récupérer la position</param>
    /// <returns>Les attributs CSS correspondant à la position du capteur par rapport au mur.</returns>
    private string GetCapteurPositionStyle(CapteurSansNavigationDTO capteur)
    {
        if (capteur == null || MurViewModel.SelectedMurDetails == null) return "";

        // Convertir les coordonnées des capteurs en pixels
        decimal leftPx = capteur.XCapteur * ScaleX;
        decimal topPx = capteur.YCapteur * ScaleY;

        return $"left: {leftPx.ToString(System.Globalization.CultureInfo.InvariantCulture)}px; " +
               $"top: {topPx.ToString(System.Globalization.CultureInfo.InvariantCulture)}px;";
    }

    /// <summary>
    /// Fonction permettant de récupérer la position d'un équipement sur un mur
    /// </summary>
    /// <param name="equipement">Equipement dont on veut récupérer la position</param>
    /// <returns>Les attributs CSS correspondant à la position de l'équipement par rapport au mur</returns>
    private string GetEquipementPositionStyle(EquipementSansNavigationDTO equipement)
    {
        if (equipement == null || MurViewModel.SelectedMurDetails == null) return "";

        // Convertir les coordonnées des équipements en pixels
        decimal leftPx = equipement.XEquipement * ScaleX;
        decimal topPx = equipement.YEquipement * ScaleY;

        return $"left: {leftPx.ToString(System.Globalization.CultureInfo.InvariantCulture)}px; " +
               $"top: {topPx.ToString(System.Globalization.CultureInfo.InvariantCulture)}px;";
    }

    /// <summary>
    /// Récupère la couleur de l'équipement au mur
    /// </summary>
    /// <param name="typeEquipementSansNavigationDTO">ID du type d'équipement</param>
    /// <returns>Une couleur CSS</returns>
    private string GetEquipementColor(int typeEquipementSansNavigationDTO)
    {
        switch (typeEquipementSansNavigationDTO)
        {
            case 2:
                return "gray";
            case 3:
                return "lightgray";
            case 1:
                return "lightgray";
            case 5:
                return "brown";
            default:
                return "black";
        }
    }

    private String? RenderOrientationEtSalle(decimal Orientation, DirectionSansNavigationDTO? direction, SalleSansNavigationDTO? salle)
    {
        // Vérification déférencement null
        if ((direction != null && salle != null) && (!String.IsNullOrEmpty(direction.LettresDirection) && !string.IsNullOrEmpty(salle.NomSalle))){
            return $"{Math.Round(Orientation, 1)}° {direction.LettresDirection} en {salle.NomSalle}";
        } else
        {
            return "Inconnue";
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await MurViewModel.LoadMurDetailsAsync(IdMur);
    }

        private void GoBack()
        {
            NavigationManager.NavigateTo("/crud/murs");
        }
}