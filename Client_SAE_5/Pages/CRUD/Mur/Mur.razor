@page "/crud/murs"
@inject NavigationManager NavigationManager
@inject SalleViewModel SalleViewModel
@inject Client_SAE_5.ViewModel.MurViewModel MurViewModel

<link href="css/MurStyle.css" rel="stylesheet"/>

<Toasts class="p-3" Messages="messages" AutoHide="true" Delay="5000" Placement="ToastsPlacement.TopRight" />

<PageTitle>Gestion des Murs</PageTitle>

<h1>Gestion des Murs</h1>

<button class="btn btn-success" @onclick="() => AddNewMur()">Ajouter un mur</button>
<br />
<br />

@if (MurViewModel.DBData.Murs == null || MurViewModel.DBData.Murs.Count == 0)
{
    <div class="d-flex justify-content-center">
        <Spinner Type="SpinnerType.Border" Size="SpinnerSize.ExtraLarge" />
    </div>
}
else
{
    <Grid @ref="murGrid"
          TItem="MurDTO"
          DataProvider="MursDataProvider"
          AllowFiltering="true"
          AllowPaging="true"
          PageSize="10"
          AllowSorting="true"
          FiltersTranslationProvider="Utils.BlazorBootstrapUtils.Instance.GridFiltersTranslationProvider"
          Class="table table-hover table-bordered"
          Responsive="true"
          AllowSelection="false"
          OnRowClick="ViewDetails"
          AllowRowClick="true"
          PaginationItemsTextFormat="{0} - {1} sur {2} murs"
          ItemsPerPageText="Murs par page"
          EmptyText="Aucun mur trouvé"
          EnumFilterSelectText="Selection">
        <GridColumns>
            <GridColumn TItem="MurDTO" HeaderText="Nom salle" PropertyName="NomSalle" SortKeySelector="item => item.NomSalle">
                @context.NomSalle
            </GridColumn>
            <GridColumn TItem="MurDTO" HeaderText="Orientation" PropertyName="Orientation" SortKeySelector="item => item.Orientation">
                @(string.Format("{0:F2}", context.Orientation))°
            </GridColumn>
            <GridColumn TItem="MurDTO" HeaderText="Direction" PropertyName="Direction" SortKeySelector="item => item.Direction">
                @(context.Direction)
            </GridColumn>
            <GridColumn TItem="MurDTO" HeaderText="Actions" Filterable="false">
                <button class="btn btn-primary" title="Modifier @context.NomSalle" @onclick="() => EditMur(context)" @onclick:stopPropagation>
                    <Icon Name="IconName.PencilFill" />
                </button>
                <button class="btn btn-danger" title="Supprimer @context.NomSalle" @onclick="() => BeginDeleteConfirmation(context)" @onclick:stopPropagation>
                    <Icon Name="IconName.Trash3Fill" />
                </button>
            </GridColumn>
        </GridColumns>
    </Grid>
}

<!-- Modale pour l'édition -->
<Modal @ref="formModal" Size="ModalSize.Large" Title="Renseignement des informations du mur">
    <BodyTemplate>
        @if (!string.IsNullOrEmpty(MurViewModel.ErrorMessage))
        {
            <div class="alert alert-danger">
                @MurViewModel.ErrorMessage
            </div>
        }

        <label>Longueur (cm) :</label>
        <input type="number" @bind="MurViewModel.MurInEdition.Longueur" class="form-control" min="1"/>

        <label>Hauteur (cm) :</label>
        <input type="number" @bind="MurViewModel.MurInEdition.Hauteur" class="form-control" min="1"/>

        <div id="sectionOrientation" class="d-flex justify-content-between flex-row">
            <section>
                <label>Orientation (0-360 °) :</label>
                <input type="number" @bind="MurViewModel.MurInEdition.Orientation" class="form-control" min="0" max="360" />
            </section>

            <section>
                <label>Direction :</label>
                <select @bind="MurViewModel.MurInEdition.IdDirection" class="form-control">
                    @if (MurViewModel.MurInEdition.IdDirection == 0)
                    {
                        <option selected value="0">--- Sélectionnez une direction ---</option>
                    }
                    @foreach (var direction in MurViewModel.DBData.Directions)
                    {
                        <option value="@direction.IdDirection">@direction.LettresDirection</option>
                    }
                </select>
            </section>
        </div>

        <label>Salle :</label>
        <select @bind="MurViewModel.MurInEdition.IdSalle" class="form-control">
            @if (MurViewModel.MurInEdition.IdSalle == 0)
            {
                <option selected value="0">--- Sélectionnez une salle ---</option>
            }
            @foreach (var salle in MurViewModel.DBData.Salles)
            {
                <option value="@salle.IdSalle">@salle.NomSalle @salle.NomBatiment @salle.NomType</option>
            }
        </select>
    </BodyTemplate>
    <FooterTemplate>
        <button class="btn btn-secondary" @onclick="ClosePopup">Annuler</button>
        @if (MurViewModel.MurInEdition.IdMur == 0)
        {
            <button class="btn btn-success" @onclick="SaveMur">Ajouter</button>
        }
        else
        {
            <button class="btn btn-primary" @onclick="SaveMur">Modifier</button>
        }
    </FooterTemplate>
</Modal>

<ConfirmDialog @ref="confirmSupprDialog" />

@code {
    private Modal formModal;
    private Grid<MurDTO> murGrid;

    private ConfirmDialog confirmSupprDialog = default!;
    List<ToastMessage> messages = new List<ToastMessage>();
    [Inject] ToastService ToastService { get; set; } = default!;

    private MurDTO? murDeleteInConfirmation;

    /// <summary>
    /// Méthode exécutée lors de l'initialisation de la page
    /// </summary>
    protected override async Task OnInitializedAsync()
    {
        if (MurViewModel.DBData.Murs == null || MurViewModel.DBData.Murs.Count == 0)
        {
            await MurViewModel.LoadMursAsync();
        }

        await MurViewModel.LoadDirectionsAsync();
        await MurViewModel.LoadSallesAsync();
    }

    /// <summary>
    /// Permet de fermer la pop up de façon asynchrone
    /// <see cref="formModal"/>
    /// </summary>
    private async void ClosePopup()
    {
        MurViewModel.ResetError();
        await formModal.HideAsync();
    }

    /// <summary>
    /// Permet d'ouvrir la pop up de façon asynchrone
    /// </summary>
    private async void OpenPopup()
    {
        await formModal.ShowAsync();
    }

    /// <summary>
    /// Permet de naviguer sur la page de détails d'un mur à partir de la grille de murs
    /// </summary>
    /// <param name="args">Ligne de la GRID</param>
    private void ViewDetails(GridRowEventArgs<MurDTO> args)
    {
        Utils.Utils.GoDetail(NavigationManager, "murs", args.Item.IdMur);
        StateHasChanged();
    }

    /// <summary>
    /// Permet d'éditer un mur de façon asynchrone
    /// </summary>
    /// <param name="mur">Mur DTO à éditer</param>
    private async Task EditMur(MurDTO mur)
    {
        await MurViewModel.SetupMurEdition(mur.IdMur);
        OpenPopup();
    }

    /// <summary>
    /// Permet d'ajouter un nouveau mur de façon asynchrone
    /// </summary>
    private async Task AddNewMur()
    {
        await MurViewModel.SetupNewMur();
        OpenPopup();
    }

    /// <summary>
    /// Permet de sauvegarder un mur une fois qu'il a été ajouté ou modifié
    /// </summary>
    private async Task SaveMur()
    {
        string confirmMessage = "";

        if (MurViewModel.MurInEdition.IdMur == 0)
        {
            await MurViewModel.AddMurAsync();
            confirmMessage = "Ajout du mur avec succès !";
        }
        else
        {
            await MurViewModel.UpdateMurAsync();
            confirmMessage = "Modification du mur avec succès !";
        }

        if (string.IsNullOrEmpty(MurViewModel.ErrorMessage))
        {
            ClosePopup();
            ToastService.Notify(new ToastMessage(ToastType.Success, confirmMessage));
            await RefreshGridAsync(); // Rafraîchir la GRID après une modification
        }
    }

    /// <summary>
    /// Permet de démarrer la suppression d'un mur
    /// </summary>
    /// <param name="mur">Mur (DTO) à supprimer</param>
    private async Task BeginDeleteConfirmation(MurDTO mur)
    {
        murDeleteInConfirmation = mur;
        await OpenDeleteConfirmation();
    }

    /// <summary>
    /// Permet de supprimer un mur, selon son ID, de façon asynchrone
    /// </summary>
    /// <param name="idMur">ID du mur à supprimer</param>
    private async Task DeleteMur(int idMur)
    {
        await MurViewModel.DeleteMurAsync(idMur);
        await RefreshGridAsync(); // Rafraîchir la GRID après une suppression
    }

    /// <summary>
    /// Ouvrir la fenêtre de confirmation de suppression d'un mur
    /// </summary>
    /// <exception cref="ArgumentNullException"></exception>
    private async Task OpenDeleteConfirmation()
    {
        var options = new ConfirmDialogOptions
            {
                YesButtonText = "Supprimer",
                YesButtonColor = ButtonColor.Danger,
                NoButtonText = "Annuler",
                NoButtonColor = ButtonColor.Primary
            };

        if (murDeleteInConfirmation == null)
        {
            throw new ArgumentNullException("Le mur dont on veut récupérer la confirmation de suppression est NULL.");
        }

        var confirmation = await confirmSupprDialog.ShowAsync(
            title: "Confirmer la suppression du mur",
            message1: "Êtes vous sûr de vouloir supprimer le mur \"" + murDeleteInConfirmation.Direction + " orienté " + murDeleteInConfirmation.Orientation + "°\" de la salle \"" + murDeleteInConfirmation.NomSalle + "\" ?",
            confirmDialogOptions: options);

        if (confirmation)
        {
            await DeleteMur(murDeleteInConfirmation.IdMur);
            ToastService.Notify(new ToastMessage(ToastType.Success, $"Le mur a été supprimé avec succès"));
        }
    }

    /// <summary>
    /// Rafraîchit la grille de murs de façon asynchrone
    /// </summary>
    /// <see cref="murGrid"></see>
    /// <exception cref="NullReferenceException"></exception>
    private async Task RefreshGridAsync()
    {
        if (murGrid != null)
        {
            await murGrid.RefreshDataAsync(); // Rafraîchir la GRID
        }
    }

    /// <summary>
    /// Permet de récupérer les données nécéssaires pour remplir la grille de murs
    /// </summary>
    /// <param name="request">Requête d'ajout</param>
    private async Task<GridDataProviderResult<MurDTO>> MursDataProvider(GridDataProviderRequest<MurDTO> request)
    {
        // Application des filtres, tri et pagination
        var data = request.ApplyTo(MurViewModel.DBData.Murs);
        return await Task.FromResult(data);
    }
}