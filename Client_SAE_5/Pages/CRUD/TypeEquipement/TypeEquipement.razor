@page "/crud/typesequipement"
@inject Client_SAE_5.ViewModel.TypeEquipementViewModel TypeEquipementViewModel
@inject NavigationManager NavigationManager

<PageTitle>Gestion des types d'équipement</PageTitle>

<h1>Gestion des types types d'équipement</h1>
<button class="btn btn-success" @onclick="() => AddNewTypeEquipement()">Ajouter un type d'équipement</button>
<br />
<br />

@if (TypeEquipementViewModel.DBData.TypesEquipement == null || TypeEquipementViewModel.DBData.TypesEquipement.Count == 0)
{
    <div class="d-flex justify-content-center">
        <Spinner Type="SpinnerType.Border" Size="SpinnerSize.ExtraLarge" />
    </div>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Nom</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var typeequipement in TypeEquipementViewModel.DBData.TypesEquipement)
            {
                <tr class="selection" @onclick="() => ViewDetails(typeequipement.IdTypeEquipement)">
                    <td>@typeequipement.NomTypeEquipement</td>
                    <td>
                        <button class="btn btn-primary" @onclick="() => EditTypeEquipement(typeequipement)" @onclick:stopPropagation><Icon Name="IconName.PencilFill"></Icon></button>
                        <button class="btn btn-danger" @onclick="() => BeginDeleteConfirmation(typeequipement)" @onclick:stopPropagation><Icon Name="IconName.Trash3Fill"></Icon></button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@* @if (TypeEquipementViewModel.SelectedTypeEquipementDetails != null)
{
    <h2>Détails du type</h2>
    <h3>Équipements</h3>
    @if (TypeEquipementViewModel.SelectedTypeEquipementDetails.Equipements?.Count > 0)
    {
        <ul>
            @foreach (var equipement in TypeEquipementViewModel.SelectedTypeEquipementDetails.Equipements)
            {
                <li>@equipement.NomEquipement</li>
            }
        </ul>
    }
    else
    {
        <p><em>Aucun équipement</em></p>
    }
}
 *@

<!-- Modale pour l'édition -->
<Modal @ref="formModal" Size="ModalSize.Large" Title="Renseignement des informations du type d'équipement">
    <BodyTemplate>
        <div>
            <label>Nom :</label>
            <input type="text" @bind="TypeEquipementViewModel.TypeEquipementInEdition.NomTypeEquipement" class="form-control" />
        </div>
    </BodyTemplate>
    <FooterTemplate>
        <button class="btn btn-secondary" @onclick="CancelEdit">Annuler</button>
        @if (TypeEquipementViewModel.TypeEquipementInEdition.IdTypeEquipement == 0)
        {
            <button class="btn btn-success" @onclick="SaveTypeEquipement">Ajouter</button>
        }
        else
        {
            <button class="btn btn-primary" @onclick="SaveTypeEquipement">Modifier</button>
        }

        @if (!string.IsNullOrEmpty(TypeEquipementViewModel.ErrorMessage))
        {
            <div class="alert alert-danger">
                @TypeEquipementViewModel.ErrorMessage
            </div>
        }
    </FooterTemplate>
</Modal>

<ConfirmDialog @ref="confirmSupprDialog" />

@code {
    private Modal formModal;
    private ConfirmDialog confirmSupprDialog = default!;
    private TypeEquipementDTO? typeequipementDeleteInConfirmation;
    [Inject] ToastService ToastService { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        if (TypeEquipementViewModel.DBData.TypesEquipement == null || TypeEquipementViewModel.DBData.TypesEquipement.Count == 0)
        {
            await TypeEquipementViewModel.LoadTypesEquipementAsync();
        }
    }

    private void ViewDetails(int idTypeEquipement)
    {
        Utils.Utils.GoDetail(NavigationManager, "typesequipement", idTypeEquipement);
        StateHasChanged();
        //await TypeEquipementViewModel.LoadTypeEquipementDetailsAsync(idTypeEquipement);
    }

    private async Task EditTypeEquipement(Client_SAE_5.DTO.TypeEquipementDTO typeEquipement)
    {
        await TypeEquipementViewModel.SetupTypeEquipementEdition(typeEquipement.IdTypeEquipement);
        OpenPopup();
    }

    private async Task AddNewTypeEquipement()
    {
        await TypeEquipementViewModel.SetupNewTypeEquipement();
        OpenPopup();
    }

    private async Task SaveTypeEquipement()
    {
        if (TypeEquipementViewModel.TypeEquipementInEdition.IdTypeEquipement == 0)
        {
            await TypeEquipementViewModel.AddTypeEquipementAsync();
        }
        else
        {
            await TypeEquipementViewModel.UpdateTypeEquipementAsync();
        }
    }

    private async Task OpenDeleteConfirmation()
    {
        var options = new ConfirmDialogOptions
            {
                YesButtonText = "Supprimer",
                YesButtonColor = ButtonColor.Danger,
                NoButtonText = "Annuler",
                NoButtonColor = ButtonColor.Primary
            };

        if (typeequipementDeleteInConfirmation == null)
        {
            throw new ArgumentNullException("Le type d'équipement dont on veut récupérer la confirmation de suppression est NULL.");
        }

        var confirmation = await confirmSupprDialog.ShowAsync(
            title: "Confirmer la suppression du type d'équipement",
            message1: "Êtes vous sûr de vouloir supprimer le type d'équipement \"" + typeequipementDeleteInConfirmation.NomTypeEquipement + "\" ?",
            confirmDialogOptions: options);

        if (confirmation)
        {
            await DeleteTypeEquipement(typeequipementDeleteInConfirmation.IdTypeEquipement);
            ToastService.Notify(new ToastMessage(ToastType.Success, $"Le type d'équipement a été supprimé avec succès"));
        }
    }

    private async Task BeginDeleteConfirmation(TypeEquipementDTO typeequipementToConfirmDeletion)
    {
        typeequipementDeleteInConfirmation = typeequipementToConfirmDeletion;
        await OpenDeleteConfirmation();
    }

    private async Task DeleteTypeEquipement(int idTypeEquipement)
    {
        await TypeEquipementViewModel.DeleteTypeEquipementAsync(idTypeEquipement);
        StateHasChanged();
    }

    private async void ClosePopup()
    {
        TypeEquipementViewModel.ResetError();
        await formModal.HideAsync();
    }

    private async void OpenPopup()
    {
        await formModal.ShowAsync();
    }

    private void CancelEdit()
    {
        ClosePopup();
    }
}
