@page "/crud/typesequipement"
@inject Client_SAE_5.ViewModel.TypeEquipementViewModel TypeEquipementViewModel
@inject NavigationManager NavigationManager

<Toasts class="p-3" Messages="messages" AutoHide="true" Delay="5000" Placement="ToastsPlacement.TopRight" />

<PageTitle>Gestion des types d'équipement</PageTitle>

<h1>Gestion des types d'équipement</h1>
<button class="btn btn-success" @onclick="() => AddNewTypeEquipement()">Ajouter un type d'équipement</button>
<br />
<br />

@if (TypeEquipementViewModel.DBData.TypesEquipement == null || TypeEquipementViewModel.DBData.TypesEquipement.Count == 0)
{
    <div class="d-flex justify-content-center">
        <Spinner Type="SpinnerType.Border" Size="SpinnerSize.ExtraLarge" />
    </div>
}
else
{
    <Grid @ref="typeEquipementGrid"
          TItem="TypeEquipementDTO"
          DataProvider="TypesEquipementDataProvider"
          AllowFiltering="true"
          AllowPaging="true"
          PageSize="10"
          AllowSorting="true"
          FiltersTranslationProvider="Utils.BlazorBootstrapUtils.Instance.GridFiltersTranslationProvider"
          Class="table table-hover table-bordered"
          Responsive="true"
          AllowSelection="false"
          OnRowClick="ViewDetails"
          AllowRowClick="true"
          PaginationItemsTextFormat="{0} - {1} sur {2} types d'équipement"
          ItemsPerPageText="Types d'équipement par page"
          EmptyText="Aucun type d'équipement trouvé"
          EnumFilterSelectText="Selection">
        <GridColumns>
            <GridColumn TItem="TypeEquipementDTO" HeaderText="Nom" PropertyName="NomTypeEquipement" SortKeySelector="item => item.NomTypeEquipement">
                @context.NomTypeEquipement
            </GridColumn>
            <GridColumn TItem="TypeEquipementDTO" HeaderText="Actions" Filterable="false">
                <button class="btn btn-primary" title="Modifier @context.NomTypeEquipement" @onclick="() => EditTypeEquipement(context)" @onclick:stopPropagation>
                    <Icon Name="IconName.PencilFill" />
                </button>
                <button class="btn btn-danger" title="Supprimer @context.NomTypeEquipement" @onclick="() => BeginDeleteConfirmation(context)" @onclick:stopPropagation>
                    <Icon Name="IconName.Trash3Fill" />
                </button>
            </GridColumn>
        </GridColumns>
    </Grid>
}

<!-- Modale pour l'édition -->
<Modal @ref="formModal" Size="ModalSize.Large" Title="Renseignement des informations du type d'équipement">
    <BodyTemplate>
        @if (!string.IsNullOrEmpty(TypeEquipementViewModel.ErrorMessage))
        {
            <div class="alert alert-danger">
                @TypeEquipementViewModel.ErrorMessage
            </div>
        }
        <div>
            <label>Nom :</label>
            <input type="text" @bind="TypeEquipementViewModel.TypeEquipementInEdition.NomTypeEquipement" class="form-control" />
        </div>
    </BodyTemplate>
    <FooterTemplate>
        <button class="btn btn-secondary" @onclick="ClosePopup">Annuler</button>
        @if (TypeEquipementViewModel.TypeEquipementInEdition.IdTypeEquipement == 0)
        {
            <button class="btn btn-success" @onclick="SaveTypeEquipement">Ajouter</button>
        }
        else
        {
            <button class="btn btn-primary" @onclick="SaveTypeEquipement">Modifier</button>
        }
    </FooterTemplate>
</Modal>

<ConfirmDialog @ref="confirmSupprDialog" />

@code {
    private Modal formModal;
    private Grid<TypeEquipementDTO> typeEquipementGrid;

    private ConfirmDialog confirmSupprDialog = default!;
    private TypeEquipementDTO? typeequipementDeleteInConfirmation;
    List<ToastMessage> messages = new List<ToastMessage>();
    [Inject] ToastService ToastService { get; set; } = default!;

    /// <summary>
    /// Méthode exécutée lors de l'initialisation de la page
    /// </summary>
    protected override async Task OnInitializedAsync()
    {
        if (TypeEquipementViewModel.DBData.TypesEquipement == null || TypeEquipementViewModel.DBData.TypesEquipement.Count == 0)
        {
            await TypeEquipementViewModel.LoadTypesEquipementAsync();
        }
    }

    /// <summary>
    /// Permet de fermer la pop up de façon asynchrone
    /// <see cref="formModal"/>
    /// </summary>
    private async void ClosePopup()
    {
        TypeEquipementViewModel.ResetError();
        await formModal.HideAsync();
    }

    /// <summary>
    /// Permet d'ouvrir la pop up de façon asynchrone
    /// </summary>
    private async void OpenPopup()
    {
        await formModal.ShowAsync();
    }

    /// <summary>
    /// Permet de naviguer sur la page de détails d'un type d'équipement à partir de la grille des type d'équipements
    /// </summary>
    /// <param name="args">Ligne de la GRID</param>
    private void ViewDetails(GridRowEventArgs<TypeEquipementDTO> args)
    {
        Utils.Utils.GoDetail(NavigationManager, "typesequipement", args.Item.IdTypeEquipement);
        StateHasChanged();
    }

    /// <summary>
    /// Permet d'éditer un type d'équipement de façon asynchrone
    /// </summary>
    /// <param name="typeEquipement">Type d'équipement DTO à éditer</param>
    private async Task EditTypeEquipement(TypeEquipementDTO typeEquipement)
    {
        await TypeEquipementViewModel.SetupTypeEquipementEdition(typeEquipement.IdTypeEquipement);
        OpenPopup();
    }

    /// <summary>
    /// Permet d'ajouter un nouveau type d'équipement de façon asynchrone
    /// </summary>
    private async Task AddNewTypeEquipement()
    {
        await TypeEquipementViewModel.SetupNewTypeEquipement();
        OpenPopup();
    }

    /// <summary>
    /// Permet de sauvegarder un type d'équipement une fois qu'il a été ajouté ou modifié
    /// </summary>
    private async Task SaveTypeEquipement()
    {
        string confirmMessage = "";

        if (TypeEquipementViewModel.TypeEquipementInEdition.IdTypeEquipement == 0)
        {
            await TypeEquipementViewModel.AddTypeEquipementAsync();
            confirmMessage = "Ajout du type d'equipement avec succès !";
        }
        else
        {
            await TypeEquipementViewModel.UpdateTypeEquipementAsync();
            confirmMessage = "Modification du type d'equipement avec succès !";
        }

        if (string.IsNullOrEmpty(TypeEquipementViewModel.ErrorMessage))
        {
            ClosePopup();
            ToastService.Notify(new ToastMessage(ToastType.Success, confirmMessage));
            await RefreshGridAsync(); // Rafraîchir la GRID après une modification
        }
    }

    /// <summary>
    /// Permet de démarrer la suppression d'un type d'équipement
    /// </summary>
    /// <param name="typeEquipement">Type d'équipement (DTO) à supprimer</param>
    private async Task BeginDeleteConfirmation(TypeEquipementDTO typeEquipement)
    {
        typeequipementDeleteInConfirmation = typeEquipement;
        await OpenDeleteConfirmation();
    }

    /// <summary>
    /// Permet de supprimer un type d'équipement, selon son ID, de façon asynchrone
    /// </summary>
    /// <param name="idTypeEquipement">ID du type d'équipement à supprimer</param>
    private async Task DeleteTypeEquipement(int idTypeEquipement)
    {
        await TypeEquipementViewModel.DeleteTypeEquipementAsync(idTypeEquipement);
        await RefreshGridAsync(); // Rafraîchir la GRID après une suppression
    }

    /// <summary>
    /// Ouvrir la fenêtre de confirmation de suppression d'un type d'équipement
    /// </summary>
    /// <exception cref="ArgumentNullException"></exception>
    private async Task OpenDeleteConfirmation()
    {
        var options = new ConfirmDialogOptions
            {
                YesButtonText = "Supprimer",
                YesButtonColor = ButtonColor.Danger,
                NoButtonText = "Annuler",
                NoButtonColor = ButtonColor.Primary
            };

        if (typeequipementDeleteInConfirmation == null)
        {
            throw new ArgumentNullException("Le type d'équipement dont on veut récupérer la confirmation de suppression est NULL.");
        }

        var confirmation = await confirmSupprDialog.ShowAsync(
            title: "Confirmer la suppression du type d'équipement",
            message1: "Êtes vous sûr de vouloir supprimer le type d'équipement \"" + typeequipementDeleteInConfirmation.NomTypeEquipement + "\" ?",
            confirmDialogOptions: options);

        if (confirmation)
        {
            await DeleteTypeEquipement(typeequipementDeleteInConfirmation.IdTypeEquipement);
            ToastService.Notify(new ToastMessage(ToastType.Success, $"Le type d'équipement a été supprimé avec succès"));
        }
    }

    /// <summary>
    /// Rafraîchit la grille de type d'équipements de façon asynchrone
    /// </summary>
    /// <see cref="typeEquipementGrid"></see>
    /// <exception cref="NullReferenceException"></exception>
    private async Task RefreshGridAsync()
    {
        if (typeEquipementGrid != null)
        {
            await typeEquipementGrid.RefreshDataAsync(); // Rafraîchir la GRID
        }
    }

    /// <summary>
    /// Permet de récupérer les données nécéssaires pour remplir la grille des types d'équipements
    /// </summary>
    /// <param name="request">Requête d'ajout</param>
    private async Task<GridDataProviderResult<TypeEquipementDTO>> TypesEquipementDataProvider(GridDataProviderRequest<TypeEquipementDTO> request)
    {
        // Application des filtres, tri et pagination
        var data = request.ApplyTo(TypeEquipementViewModel.DBData.TypesEquipement);
        return await Task.FromResult(data);
    }
}