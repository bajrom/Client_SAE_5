@page "/crud/typesequipement"
@inject Client_SAE_5.ViewModel.TypeEquipementViewModel TypeEquipementViewModel

<PageTitle>Gestion des types d'équipement</PageTitle>

<h1>Gestion des types types d'équipement</h1>

@if (TypeEquipementViewModel.TypesEquipement == null || TypeEquipementViewModel.TypesEquipement.Count == 0)
{
    <Spinner></Spinner>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Nom</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var typeequipement in TypeEquipementViewModel.TypesEquipement)
            {
                <tr class="selection" @onclick="() => ViewDetails(typeequipement.IdTypeEquipement)">
                    <td>@typeequipement.NomTypeEquipement</td>
                    <td>
                        <button class="btn btn-primary" @onclick="() => EditTypeEquipement(typeequipement)"><Icon Name="IconName.PencilFill"></Icon></button>
                        <button class="btn btn-danger" @onclick="() => DeleteTypeEquipement(typeequipement.IdTypeEquipement)"><Icon Name="IconName.Trash3Fill"></Icon></button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@if (TypeEquipementViewModel.SelectedTypeEquipementDetails != null)
{
    <h2>Détails du type</h2>
    <h3>Équipements</h3>
    @if (TypeEquipementViewModel.SelectedTypeEquipementDetails.Equipements?.Count > 0)
    {
        <ul>
            @foreach (var equipement in TypeEquipementViewModel.SelectedTypeEquipementDetails.Equipements)
            {
                <li>@equipement.NomEquipement</li>
            }
        </ul>
    }
    else
    {
        <p><em>Aucun équipement</em></p>
    }
}

<h2>Ajouter ou Modifier un type d'équipement</h2>
<div>
    <label>Nom :</label>
    <input type="text" @bind="TypeEquipementViewModel.EditableTypeEquipement.NomTypeEquipement" class="form-control" />

    <button class="btn btn-success" @onclick="SaveTypeEquipement">Enregistrer</button>
    <button class="btn btn-secondary" @onclick="CancelEdit">Annuler</button>
</div>

@if (!string.IsNullOrEmpty(TypeEquipementViewModel.ErrorMessage))
{
    <div class="alert alert-danger">
        @TypeEquipementViewModel.ErrorMessage
    </div>
}

@code {
    protected override async Task OnInitializedAsync()
    {
        await TypeEquipementViewModel.LoadTypesEquipementAsync();
    }

    private async Task ViewDetails(int idTypeEquipement)
    {
        await TypeEquipementViewModel.LoadTypeEquipementDetailsAsync(idTypeEquipement);
    }

    private async Task EditTypeEquipement(Client_SAE_5.DTO.TypeEquipementDTO typeEquipement)
    {
        var temp = await TypeEquipementViewModel.LoadTypeEquipementsDetailsWithoutDefAsync(typeEquipement.IdTypeEquipement);
        TypeEquipementViewModel.EditTypeEquipement(temp);
    }

    private async Task SaveTypeEquipement()
    {
        if (TypeEquipementViewModel.EditableTypeEquipement.IdTypeEquipement == 0)
        {
            await TypeEquipementViewModel.AddTypeEquipementAsync();
        }
        else
        {
            await TypeEquipementViewModel.UpdateTypeEquipementAsync();
        }
    }

    private async Task DeleteTypeEquipement(int idTypeEquipement)
    {
        await TypeEquipementViewModel.DeleteTypeEquipementAsync(idTypeEquipement);
    }

    private void CancelEdit()
    {
        TypeEquipementViewModel.EditableTypeEquipement = new Client_SAE_5.DTO.TypeEquipementDTO();
    }
}
