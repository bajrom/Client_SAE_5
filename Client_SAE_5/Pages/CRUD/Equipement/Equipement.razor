@page "/crud/equipements"
@inject Client_SAE_5.ViewModel.EquipementViewModel EquipementViewModel
@inject NavigationManager NavigationManager

<link rel="stylesheet" href="css/EquipementStyle.css" type="text/css" />
<Toasts class="p-3" Messages="messages" AutoHide="true" Delay="5000" Placement="ToastsPlacement.TopRight" />

<PageTitle>Gestion des équipements</PageTitle>

<h1>Gestion des équipements</h1>
<button class="btn btn-success" @onclick="() => AddNewEquipement()">Ajouter un équipement</button>
<br />
<br />

@if (EquipementViewModel.DBData.Equipements == null || EquipementViewModel.DBData.Equipements.Count == 0)
{
    <div class="d-flex justify-content-center">
        <Spinner Type="SpinnerType.Border" Size="SpinnerSize.ExtraLarge" />
    </div>
}
else
{
    <Grid @ref="equipementGrid"
        TItem="EquipementDTO"
          DataProvider="EquipementDataProvider"
          AllowFiltering="true"
          AllowPaging="true"
          PageSize="10"
          AllowSorting="true"
          FiltersTranslationProvider="Utils.BlazorBootstrapUtils.Instance.GridFiltersTranslationProvider"

          Class="table table-hover table-bordered"

          Responsive="true"
          AllowSelection="false"
          OnRowClick="ViewDetails"
          AllowRowClick="true"

          PaginationItemsTextFormat="{0} - {1} sur {2} équipements"
          ItemsPerPageText="Equipement par page"
          EmptyText="Aucun équipement trouvé"
          EnumFilterSelectText="Selection"
        >
        <GridColumns>
            <GridColumn  TItem="EquipementDTO" HeaderText="Nom" PropertyName="NomEquipement" SortKeySelector="item => item.NomEquipement" >
                @context.NomEquipement
            </GridColumn>
            <GridColumn TItem="EquipementDTO" HeaderText="Salle" PropertyName="NomSalleEquipement" SortKeySelector="item => item.NomSalleEquipement">
                @context.NomSalleEquipement
            </GridColumn>
            <GridColumn TItem="EquipementDTO" HeaderText="Type d'équipement" PropertyName="NomTypeEquipement" SortKeySelector="item => item.NomTypeEquipement">
                @context.NomTypeEquipement
            </GridColumn>
            <GridColumn TItem="EquipementDTO" PropertyName="Dimensions" SortKeySelector="item => item.Dimensions" Filterable="false">
                <HeaderContent>
                    Dimensions (cm)
                    <Tooltip Class="me-4" Title="Longueur * Largeur * Hauteur" Placement="TooltipPlacement.Top">
                        <Icon Name="IconName.InfoCircleFill"></Icon>
                    </Tooltip>
                </HeaderContent>
                <ChildContent>
                    @context.Dimensions
                </ChildContent>
            </GridColumn>
            <GridColumn TItem="EquipementDTO" HeaderText="Actions" Filterable="false">
                <button class="btn btn-primary" title="Modifier @context.NomEquipement" @onclick="() => EditEquipement(context)" @onclick:stopPropagation>
                    <Icon Name="IconName.PencilFill" />
                </button>
                <button class="btn btn-danger" title="Supprimer @context.NomEquipement" @onclick="() => BeginDeleteConfirmation(context)" @onclick:stopPropagation>
                    <Icon Name="IconName.Trash3Fill" />
                </button>
            </GridColumn>
        </GridColumns>
    </Grid>
}

<!-- Modale pour l'édition -->
<Modal @ref="formModal" Size="ModalSize.Large" Title="Renseignement des informations de l'équipement">
    <BodyTemplate>
        @if (!string.IsNullOrEmpty(EquipementViewModel.ErrorMessage))
        {
            <div class="alert alert-danger">
                @EquipementViewModel.ErrorMessage
            </div>
        }
        <div id="formEquipement">
            <div id="leftPartFormEquipement">
                <div class="formGroup">
                    <section>
                        <label>Nom de l'équipement:</label>
                        <input type="text" @bind="EquipementViewModel.EquipementInEdition.NomEquipement" class="form-control" />
                    </section>

                    <section>
                        <label>Type équipement :</label>
                        <select @bind="EquipementViewModel.EquipementInEdition.TypeEquipement.IdTypeEquipement" class="form-control">
                            @if (EquipementViewModel.EquipementInEdition.TypeEquipement.IdTypeEquipement == 0)
                            {
                                <option selected value="0">--- Sélectionnez un type d'équipement ---</option>
                            }
                            @foreach (var typeequipement in EquipementViewModel.DBData.TypesEquipement)
                            {
                                <option value="@typeequipement.IdTypeEquipement">@typeequipement.NomTypeEquipement</option>
                            }
                        </select>
                    </section>

                    <section>
                        <label>Etat:</label>
                        <div id="radioButtonFlex">
                            <div>
                                <input type="radio" checked="@(EquipementViewModel.EquipementInEdition.EstActif == "OUI")"
                                       @onchange="@(() => EquipementViewModel.EquipementInEdition.EstActif = "OUI")" />
                                <label>Actif</label>
                            </div>

                            <div>
                                <input type="radio" checked="@(EquipementViewModel.EquipementInEdition.EstActif == "NON")"
                                       @onchange="@(() => EquipementViewModel.EquipementInEdition.EstActif = "NON")" />
                                <label>Inactif</label>
                            </div>

                            <div>
                                <input type="radio" checked="@(EquipementViewModel.EquipementInEdition.EstActif == "NSP")"
                                       @onchange="@(() => EquipementViewModel.EquipementInEdition.EstActif = "NSP")" />
                                <label>Inconnu</label>
                            </div>
                        </div>
                    </section>
                </div>

                <div class="formShort formGroup" id="formEquipementSize" >
                    <section>
                        <label>Longueur (cm):</label>
                        <input type="number" @bind="EquipementViewModel.EquipementInEdition.Longueur" class="form-control" />
                    </section>

                    <section>
                        <label>Largeur (cm):</label>
                        <input type="number" @bind="EquipementViewModel.EquipementInEdition.Largeur" class="form-control" />
                    </section>

                    <section>
                        <label>Hauteur (cm):</label>
                        <input type="number" @bind="EquipementViewModel.EquipementInEdition.Hauteur" class="form-control" />
                    </section>
                </div>
            </div>
            <div id="rightPartFormEquipement">
                <div class="formLong" id="formEquipementLocation">
                    <div id="formEquipementPositionWhereabout" class="formGroup">
                        <section>
                            <label>Salle :</label>
                            <select @bind="EquipementViewModel.EquipementInEditionNomSalleSelected" class="form-control">
                                @if (string.IsNullOrEmpty(EquipementViewModel.EquipementInEditionNomSalleSelected))
                                {
                                    <option value="">-- Sélectionnez une salle --</option>
                                }
                                @foreach (string nomSalle in EquipementViewModel.NomSalles)
                                {
                                    <option value="@nomSalle">@nomSalle</option>
                                }
                            </select>
                        </section>

                        @if (!string.IsNullOrEmpty(EquipementViewModel.EquipementInEditionNomSalleSelected))
                        {
                            <section>
                                <label>Mur :</label>
                                <select class="form-control" @onchange="HandleChange">
                                    @if (EquipementViewModel.EquipementInEditionNomSalleSelected != EquipementViewModel.EquipementInEdition.Salle.NomSalle || EquipementViewModel.EquipementInEdition.Mur.IdMur == 0)
                                    {
                                        <option selected value="0">--- Sélectionnez un mur ---</option>
                                    }
                                    @foreach (var mur in EquipementViewModel.DBData.Murs.Where(m => m.NomSalle == EquipementViewModel.EquipementInEditionNomSalleSelected))
                                    {
                                        @if (mur.IdMur == EquipementViewModel.EquipementInEditionOldMurId)
                                        {
                                            <option selected value="@mur.IdMur">Mur @mur.Direction orienté @Math.Round(mur.Orientation)° salle @mur.NomSalle</option>
                                        }
                                        else
                                        {
                                            <option value="@mur.IdMur">Mur @mur.Direction orienté @Math.Round(mur.Orientation)° salle @mur.NomSalle</option>
                                        }
                                    }
                                </select>
                            </section>
                        }
                    </div>

                    <div id="formEquipementPositionCoordinates" class="formGroup">
                        <section>
                            <label>
                                Position X (cm)
                                <Tooltip Class="me-4" Title="Par rapport à la longueur du mur (partant de la gauche)" Placement="TooltipPlacement.Right">
                                    <Icon Name="IconName.InfoCircleFill"></Icon>
                                </Tooltip>
                            </label>
                            <input type="number" @bind="EquipementViewModel.EquipementInEdition.PositionX" class="form-control" min="0" />
                        </section>

                        <section>
                            <label>
                                Position Y (cm)
                                <Tooltip Class="me-4" Title="Par rapport à la hauteur du mur (partant du haut)" Placement="TooltipPlacement.Right">
                                    <Icon Name="IconName.InfoCircleFill"></Icon>
                                </Tooltip>
                            </label>
                            <input type="number" @bind="EquipementViewModel.EquipementInEdition.PositionY" class="form-control" min="0" />
                        </section>

                        <section>
                            <label>
                                Position Z (cm)
                                <Tooltip Class="me-4" Title="Distance du mur le plus proche / de référence" Placement="TooltipPlacement.Right">
                                    <Icon Name="IconName.InfoCircleFill"></Icon>
                                </Tooltip>
                            </label>
                            <input type="number" @bind="EquipementViewModel.EquipementInEdition.PositionZ" class="form-control" min="0" />
                        </section>
                    </div>
                </div>
            </div>
        </div>
    </BodyTemplate>
    <FooterTemplate>
        <button class="btn btn-secondary" @onclick="ClosePopup">Annuler</button>
        @if (isMurLoading)
        {
            <Spinner Type="SpinnerType.Border" Size="SpinnerSize.Small" />
        }
        @if (EquipementViewModel.EquipementInEdition.IdEquipement == 0)
        {
            <button class="btn btn-success" @onclick="SaveEquipement" disabled="@isMurLoading">Ajouter</button>
        }
        else
        {
            <button class="btn btn-primary" @onclick="SaveEquipement" disabled="@isMurLoading">Modifier</button>
        }
    </FooterTemplate>
</Modal>

<ConfirmDialog @ref="confirmSupprDialog" />

@code {
    public enum TypeEquipements
    {
        Registered,
        VerificationPending,
        Verified
    };

    private Grid<EquipementDTO> equipementGrid;
    private Modal formModal;

    private ConfirmDialog confirmSupprDialog = default!;
    List<ToastMessage> messages = new List<ToastMessage>();
    [Inject] ToastService ToastService { get; set; } = default!;

    private EquipementDTO? equipementDeleteInConfirmation;
    bool isMurLoading = false;

    /// <summary>
    /// Méthode exécutée lors de l'initialisation de la page
    /// </summary>
    protected override async Task OnInitializedAsync()
    {
        if (EquipementViewModel.DBData.Equipements == null || EquipementViewModel.DBData.Equipements.Count == 0)
        {
            await EquipementViewModel.LoadEquipementsAsync();
        }
    }

    /// <summary>
    /// Permet de fermer la pop up de façon asynchrone
    /// <see cref="formModal"/>
    /// </summary>
    private async void ClosePopup()
    {
        EquipementViewModel.ResetError();
        await formModal.HideAsync();
    }

    /// <summary>
    /// Permet d'ouvrir la pop up de façon asynchrone
    /// </summary>
    private async void OpenPopup()
    {
        await formModal.ShowAsync();
    }

    /// <summary>
    /// Permet de naviguer sur la page de détails d'un équipement à partir de la grille des équipements
    /// </summary>
    /// <param name="args">Ligne de la GRID</param>
    private void ViewDetails(GridRowEventArgs<EquipementDTO> args)
    {
        Utils.Utils.GoDetail(NavigationManager, "equipements", args.Item.IdEquipement);
        //await EquipementViewModel.LoadEquipementDetailsAsync(idEquipement);
        StateHasChanged();
    }

    /// <summary>
    /// Permet d'éditer un équipement de façon asynchrone
    /// </summary>
    /// <param name="equipement">Capteur DTO à éditer</param>
    private async Task EditEquipement(EquipementDTO equipement)
    {
        await EquipementViewModel.SetupEquipementEdition(equipement.IdEquipement);
        OpenPopup();
    }

    /// <summary>
    /// Permet d'ajouter un nouveau équipement de façon asynchrone
    /// </summary>
    private async Task AddNewEquipement()
    {
        await EquipementViewModel.SetupNewEquipement();
        OpenPopup();
    }

    /// <summary>
    /// Permet de sauvegarder un équipement une fois qu'il a été ajouté ou modifié
    /// </summary>
    private async Task SaveEquipement()
    {
        string confirmMessage = "";

        if (EquipementViewModel.EquipementInEdition.IdEquipement == 0)
        {
            await EquipementViewModel.AddEquipementAsync();
            confirmMessage = "Ajout de l'equipement avec succès !";
        }
        else
        {
            await EquipementViewModel.UpdateEquipementAsync();
            confirmMessage = "Modification de l'equipement avec succès !";
        }

        if (string.IsNullOrEmpty(EquipementViewModel.ErrorMessage))
        {
            ClosePopup();
            ToastService.Notify(new ToastMessage(ToastType.Success, confirmMessage));
            await RefreshGridAsync();
        }
    }

    /// <summary>
    /// Permet de démarrer la suppression d'un équipement
    /// </summary>
    /// <param name="equipement">Équipement (DTO) à supprimer</param>
    private async Task BeginDeleteConfirmation(EquipementDTO equipement)
    {
        equipementDeleteInConfirmation = equipement;
        await OpenDeleteConfirmation();
    }

    /// <summary>
    /// Permet de supprimer un équipement, selon son ID, de façon asynchrone
    /// </summary>
    /// <param name="idEquipement">ID du équipement à supprimer</param>
    private async Task DeleteEquipement(int idEquipement)
    {
        await EquipementViewModel.DeleteEquipementAsync(idEquipement);
        StateHasChanged();
    }

    /// <summary>
    /// Ouvrir la fenêtre de confirmation de suppression d'un équipement
    /// </summary>
    /// <exception cref="ArgumentNullException"></exception>
    private async Task OpenDeleteConfirmation()
    {
        var options = new ConfirmDialogOptions
            {
                YesButtonText = "Supprimer",
                YesButtonColor = ButtonColor.Danger,
                NoButtonText = "Annuler",
                NoButtonColor = ButtonColor.Primary
            };

        if (equipementDeleteInConfirmation == null)
        {
            throw new ArgumentNullException("L'équipement dont on veut récupérer la confirmation de suppression est NULL.");
        }

        var confirmation = await confirmSupprDialog.ShowAsync(
            title: "Confirmer la suppression de l'équipement",
            message1: "Êtes vous sûr de vouloir supprimer l'équipement \"" + equipementDeleteInConfirmation.NomEquipement + "\" de type \"" + equipementDeleteInConfirmation.NomTypeEquipement+ " de la salle \"" + equipementDeleteInConfirmation.NomSalleEquipement + "\" ?",
            confirmDialogOptions: options);

        if (confirmation)
        {
            await DeleteEquipement(equipementDeleteInConfirmation.IdEquipement);
            await RefreshGridAsync();
            ToastService.Notify(new ToastMessage(ToastType.Success, $"L'équipement a été supprimé avec succès"));
        }
    }

    /// <summary>
    /// Rafraîchit la grille des équipements de façon asynchrone
    /// </summary>
    /// <see cref="equipementGrid"></see>
    /// <exception cref="NullReferenceException"></exception>
    private async Task RefreshGridAsync()
    {
        if (equipementGrid != null)
        {
            await equipementGrid.RefreshDataAsync();
        }
    }


    private HashSet<EquipementDTO> selectedEquipements = new();

    /// <summary>
    /// Permet de récupérer les données nécéssaires pour remplir la grille des équipements
    /// </summary>
    /// <param name="request">Requête d'ajout</param>
    private async Task<GridDataProviderResult<EquipementDTO>> EquipementDataProvider(GridDataProviderRequest<EquipementDTO> request)
    {
        // Application des filtres, tri et pagination
        var data = request.ApplyTo(EquipementViewModel.DBData.Equipements);
        return await Task.FromResult(data);
    }

    /// <summary>
    /// Change le mur sélectionner et prend ses détails
    /// </summary>
    /// <param name="e">Arguments</param>
    private async void HandleChange(ChangeEventArgs e)
    {
        isMurLoading = true;
        await EquipementViewModel.ChangeMur(int.Parse(e.Value.ToString()));
        isMurLoading = false;
        StateHasChanged();
    }
}
