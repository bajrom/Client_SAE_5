@page "/crud/equipements"
@inject Client_SAE_5.ViewModel.EquipementViewModel EquipementViewModel
@inject NavigationManager NavigationManager

<PageTitle>Gestion des équipements</PageTitle>

<h1>Gestion des équipements</h1>
<button class="btn btn-success" @onclick="() => AddNewEquipement()">Ajouter un équipement</button>
<br />
<br />
@if (EquipementViewModel.DBData.Equipements == null || EquipementViewModel.DBData.Equipements.Count == 0)
{
    <div class="d-flex justify-content-center">
        <Spinner Type="SpinnerType.Border" Size="SpinnerSize.ExtraLarge" />
    </div>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Nom</th>
                <th>Salle</th>
                <th>Type d'équipement</th>
                <th>Dimensions (Longueur*largeur*Hauteur)</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var equipement in EquipementViewModel.DBData.Equipements)
            {
                <tr class="selection" @onclick="() => ViewDetails(equipement.IdEquipement)">
                    <td>@equipement.NomEquipement</td>
                    <td>@equipement.NomSalleEquipement</td>
                    <td>@equipement.NomTypeEquipement</td>
                    <td>@equipement.Dimensions</td>
                    <td>
                        <button class="btn btn-primary" @onclick="() => EditEquipement(equipement)" @onclick:stopPropagation><Icon Name="IconName.PencilFill"></Icon></button>
                        <button class="btn btn-danger" @onclick="() => BeginDeleteConfirmation(equipement)" @onclick:stopPropagation><Icon Name="IconName.Trash3Fill"></Icon></button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@* @if (EquipementViewModel.SelectedEquipementDetails != null)
{
    <h2>Détails de l'équipement</h2>
    <p><strong>Nom :</strong> @EquipementViewModel.SelectedEquipementDetails.NomEquipement</p>
    <p><strong>Dimensions :</strong>Longueur: @EquipementViewModel.SelectedEquipementDetails.Longueur (cm), largeur: @EquipementViewModel.SelectedEquipementDetails.Largeur (cm), hauteur: @EquipementViewModel.SelectedEquipementDetails.Hauteur</p>
    <p><strong>Est actif :</strong> @EquipementViewModel.SelectedEquipementDetails.EstActif</p>
    <p><strong>X :</strong> @EquipementViewModel.SelectedEquipementDetails.PositionX</p>
    <p><strong>Y :</strong> @EquipementViewModel.SelectedEquipementDetails.PositionY</p>
    <p><strong>Z :</strong> @EquipementViewModel.SelectedEquipementDetails.PositionZ</p>

    <h3>Salle</h3>
    @if (EquipementViewModel.SelectedEquipementDetails.Salle != null)
    {
        <p><strong>Hauteur : </strong><li>@EquipementViewModel.SelectedEquipementDetails.Salle.NomSalle</li></p>
    }
    else
    {
        <p><em>L'éauipement n'est pas dans une salle</em></p>
    }

    <h3>Type d'équipement</h3>
    @if (EquipementViewModel.SelectedEquipementDetails.TypeEquipement != null)
    {
        <p><strong>Nom : </strong><li>@EquipementViewModel.SelectedEquipementDetails.TypeEquipement.NomTypeEquipement</li></p>
    }
    else
    {
        <p><em>L'éauipement n'a pas de type d'éauipement</em></p>
    }
} *@

<!-- Modale pour l'édition -->
<Modal @ref="formModal" Size="ModalSize.Large" Title="Renseignement des informations de l'équipement">
    <BodyTemplate>
        <div>
            <label>Nom :</label>
            <input type="text" @bind="EquipementViewModel.EquipementInEdition.NomEquipement" class="form-control" />

            <label>Est actif ? :</label>
            <label>OUI</label>
            <input type="radio" checked="@(EquipementViewModel.EquipementInEdition.EstActif == "OUI")"
                   @onchange="@(() => EquipementViewModel.EquipementInEdition.EstActif = "OUI")" />
            <label>NON</label>
            <input type="radio" checked="@(EquipementViewModel.EquipementInEdition.EstActif == "NON")"
                   @onchange="@(() => EquipementViewModel.EquipementInEdition.EstActif = "NON")" />
            <label>NSP</label>
            <input type="radio" checked="@(EquipementViewModel.EquipementInEdition.EstActif == "NSP")"
                   @onchange="@(() => EquipementViewModel.EquipementInEdition.EstActif = "NSP")" />
            <br />

            <label>Longueur :</label>
            <input type="number" @bind="EquipementViewModel.EquipementInEdition.Longueur" class="form-control" />

            <label>Largeur :</label>
            <input type="number" @bind="EquipementViewModel.EquipementInEdition.Largeur" class="form-control" />

            <label>Hauteur :</label>
            <input type="number" @bind="EquipementViewModel.EquipementInEdition.Hauteur" class="form-control" />

            <label>X :</label>
            <input type="number" @bind="EquipementViewModel.EquipementInEdition.PositionX" class="form-control" />

            <label>Y :</label>
            <input type="number" @bind="EquipementViewModel.EquipementInEdition.PositionY" class="form-control" />

            <label>Z :</label>
            <input type="number" @bind="EquipementViewModel.EquipementInEdition.PositionZ" class="form-control" />

            <label>Salle :</label>
            <select @bind="EquipementViewModel.EquipementInEditionNomSalleSelected" class="form-control">
                @if (string.IsNullOrEmpty(EquipementViewModel.EquipementInEditionNomSalleSelected))
                {
                    <option value="">-- Sélectionnez une salle --</option>
                }
                @foreach (string nomSalle in EquipementViewModel.NomSalles)
                {
                    <option value="@nomSalle">@nomSalle</option>
                }
            </select>


            @if (!string.IsNullOrEmpty(EquipementViewModel.EquipementInEditionNomSalleSelected))
            {
                <label>Mur :</label>
                <select @bind="EquipementViewModel.EquipementInEdition.Mur.IdMur" class="form-control">
                    @if (EquipementViewModel.EquipementInEditionNomSalleSelected != EquipementViewModel.EquipementInEdition.Salle.NomSalle || EquipementViewModel.EquipementInEdition.Mur.IdMur == 0)
                    {
                        <option selected value="0">--- Sélectionnez un mur ---</option>
                    }
                    @foreach (var mur in EquipementViewModel.DBData.Murs.Where(m => m.NomSalle == EquipementViewModel.EquipementInEditionNomSalleSelected))
                    {
                        @if (mur.IdMur == EquipementViewModel.EquipementInEditionOldMurId)
                        {
                            <option selected value="@mur.IdMur">Mur @mur.Direction orienté @Math.Round(mur.Orientation)° salle @mur.NomSalle</option>
                        }
                        else
                        {
                            <option value="@mur.IdMur">Mur @mur.Direction orienté @Math.Round(mur.Orientation)° salle @mur.NomSalle</option>
                        }
                    }
                </select>
            }

            <label>Type équipement :</label>
            <select @bind="EquipementViewModel.EquipementInEdition.TypeEquipement.IdTypeEquipement" class="form-control">
                @if (EquipementViewModel.EquipementInEdition.TypeEquipement.IdTypeEquipement == 0)
                {
                    <option selected value="0">--- Sélectionnez un type d'équipement ---</option>
                }
                @foreach (var typeequipement in EquipementViewModel.DBData.TypesEquipement)
                {
                    <option value="@typeequipement.IdTypeEquipement">@typeequipement.NomTypeEquipement</option>
                }
            </select>
        </div>
    </BodyTemplate>
    <FooterTemplate>
        <button class="btn btn-secondary" @onclick="CancelEdit">Annuler</button>
        @if (EquipementViewModel.EquipementInEdition.IdEquipement == 0)
        {
            <button class="btn btn-success" @onclick="SaveEquipement">Ajouter</button>
        }
        else
        {
            <button class="btn btn-primary" @onclick="SaveEquipement">Modifier</button>
        }

        @if (!string.IsNullOrEmpty(EquipementViewModel.ErrorMessage))
        {
            <div class="alert alert-danger">
                @EquipementViewModel.ErrorMessage
            </div>
        }
    </FooterTemplate>
</Modal>

<ConfirmDialog @ref="confirmSupprDialog" />

@code {
    private Modal formModal;

    private ConfirmDialog confirmSupprDialog = default!;
    List<ToastMessage> messages = new List<ToastMessage>();
    [Inject] ToastService ToastService { get; set; } = default!;

    private EquipementDTO? equipementDeleteInConfirmation;

    protected override async Task OnInitializedAsync()
    {
        if (EquipementViewModel.DBData.Equipements == null || EquipementViewModel.DBData.Equipements.Count == 0)
        {
            await EquipementViewModel.LoadEquipementsAsync();
        }
    }

    private async void ClosePopup()
    {
        EquipementViewModel.ResetError();
        await formModal.HideAsync();
    }

    private async void OpenPopup()
    {
        await formModal.ShowAsync();
    }

    private void ViewDetails(int idEquipement)
    {
        Utils.Utils.GoDetail(NavigationManager, "equipements", idEquipement);
        //await EquipementViewModel.LoadEquipementDetailsAsync(idEquipement);
        StateHasChanged();
    }

    private async Task EditEquipement(Client_SAE_5.DTO.EquipementDTO equipement)
    {
        await EquipementViewModel.SetupEquipementEdition(equipement.IdEquipement);
        OpenPopup();
    }

    private async Task AddNewEquipement()
    {
        await EquipementViewModel.SetupNewEquipement();
        OpenPopup();
    }

    private async Task SaveEquipement()
    {
        if (EquipementViewModel.EquipementInEdition.IdEquipement == 0)
        {
            await EquipementViewModel.AddEquipementAsync();
        }
        else
        {
            await EquipementViewModel.UpdateEquipementAsync();
        }

        if (string.IsNullOrEmpty(EquipementViewModel.ErrorMessage))
        {
            ClosePopup();
            StateHasChanged();
        }
    }

    private async Task OpenDeleteConfirmation()
    {
        var options = new ConfirmDialogOptions
            {
                YesButtonText = "Supprimer",
                YesButtonColor = ButtonColor.Danger,
                NoButtonText = "Annuler",
                NoButtonColor = ButtonColor.Primary
            };

        if (equipementDeleteInConfirmation == null)
        {
            throw new ArgumentNullException("L'équipement dont on veut récupérer la confirmation de suppression est NULL.");
        }

        var confirmation = await confirmSupprDialog.ShowAsync(
            title: "Confirmer la suppression de l'équipement",
            message1: "Êtes vous sûr de vouloir supprimer l'équipement \"" + equipementDeleteInConfirmation.NomEquipement + "\" de type \"" + equipementDeleteInConfirmation.NomTypeEquipement+ " de la salle \"" + equipementDeleteInConfirmation.NomSalleEquipement + "\" ?",
            confirmDialogOptions: options);

        if (confirmation)
        {
            await DeleteEquipement(equipementDeleteInConfirmation.IdEquipement);
            ToastService.Notify(new ToastMessage(ToastType.Success, $"L'équipement a été supprimé avec succès"));
        }
    }

    private async Task BeginDeleteConfirmation(EquipementDTO equipementToConfirmDeletion)
    {
        equipementDeleteInConfirmation = equipementToConfirmDeletion;
        await OpenDeleteConfirmation();
    }

    private async Task DeleteEquipement(int idEquipement)
    {
        await EquipementViewModel.DeleteEquipementAsync(idEquipement);
        StateHasChanged();
    }

    private void CancelEdit()
    {
        ClosePopup();
    }
}
