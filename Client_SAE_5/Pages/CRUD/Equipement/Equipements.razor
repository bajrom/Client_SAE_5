@page "/crud/equipements"
@inject Client_SAE_5.ViewModel.EquipementViewModel EquipementViewModel

<PageTitle>Gestion des équipements</PageTitle>

<h1>Gestion des équipements</h1>

@if (EquipementViewModel.Equipements == null || EquipementViewModel.Equipements.Count == 0)
{
    <p><em>Chargement des équipements ou aucun équipement trouvée...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Nom</th>
                <th>Salle</th>
                <th>Type d'équipement</th>
                <th>Dimensions (Longueur*largeur*Hauteur)</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var equipement in EquipementViewModel.Equipements)
            {
                <tr>
                    <td>@equipement.NomEquipement</td>
                    <td>@equipement.NomSalleEquipement</td>
                    <td>@equipement.NomTypeEquipement</td>
                    <td>@equipement.Dimensions</td>
                    <td>
                        <button class="btn btn-info" @onclick="() => ViewDetails(equipement.IdEquipement)">Détails</button>
                        <button class="btn btn-primary" @onclick="() => EditEquipement(equipement)">Modifier</button>
                        <button class="btn btn-danger" @onclick="() => DeleteEquipement(equipement.IdEquipement)">Supprimer</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@if (EquipementViewModel.SelectedEquipementDetails != null)
{
    <h2>Détails de l'équipement</h2>
    <p><strong>Nom :</strong> @EquipementViewModel.SelectedEquipementDetails.NomEquipement</p>
    <p><strong>Dimensions :</strong>Longueur: @EquipementViewModel.SelectedEquipementDetails.Longueur (cm), largeur: @EquipementViewModel.SelectedEquipementDetails.Largeur (cm), hauteur: @EquipementViewModel.SelectedEquipementDetails.Hauteur</p>
    <p><strong>Est actif :</strong> @EquipementViewModel.SelectedEquipementDetails.EstActif</p>
    <p><strong>X :</strong> @EquipementViewModel.SelectedEquipementDetails.PositionX</p>
    <p><strong>Y :</strong> @EquipementViewModel.SelectedEquipementDetails.PositionY</p>
    <p><strong>Z :</strong> @EquipementViewModel.SelectedEquipementDetails.PositionZ</p>

    <h3>Salle</h3>
    @if (EquipementViewModel.SelectedEquipementDetails.Salle != null)
    {
        <p><strong>Hauteur : </strong><li>@EquipementViewModel.SelectedEquipementDetails.Salle.NomSalle</li></p>
    }
    else
    {
        <p><em>L'éauipement n'est pas dans une salle</em></p>
    }

    <h3>Type d'équipement</h3>
    @if (EquipementViewModel.SelectedEquipementDetails.TypeEquipement != null)
    {
        <p><strong>Nom : </strong><li>@EquipementViewModel.SelectedEquipementDetails.TypeEquipement.NomTypeEquipement</li></p>
    }
    else
    {
        <p><em>L'éauipement n'a pas de type d'éauipement</em></p>
    }
}

<h2>Ajouter ou Modifier un équipement</h2>
<div>
    <label>Nom :</label>
    <input type="text" @bind="EquipementViewModel.EditableEquipement.NomEquipement" class="form-control" />

    <label>Est actif ? :</label>

    <label>OUI</label>
    <input type="radio" checked="@(EquipementViewModel.EditableEquipement.EstActif == "OUI")" name="OUI" @onchange="@(() => EquipementViewModel.EditableEquipement.EstActif = "OUI")" />
    <label>NON</label>
    <input type="radio" checked="@(EquipementViewModel.EditableEquipement.EstActif == "NON")" name="NON" @onchange="@(() => EquipementViewModel.EditableEquipement.EstActif = "NON")" />
    <label>NSP</label>
    <input type="radio" checked="@(EquipementViewModel.EditableEquipement.EstActif == "NSP")" name="NSP" @onchange="@(() => EquipementViewModel.EditableEquipement.EstActif = "NSP")" />

    <label>Longueur :</label>
    <input type="number" @bind="EquipementViewModel.EditableEquipement.Longueur" class="form-control" />

    <label>Largeur :</label>
    <input type="number" @bind="EquipementViewModel.EditableEquipement.Largeur" class="form-control" />

    <label>Hauteur :</label>
    <input type="number" @bind="EquipementViewModel.EditableEquipement.Hauteur" class="form-control" />

    <label>X :</label>
    <input type="number" @bind="EquipementViewModel.EditableEquipement.XEquipement" class="form-control" />

    <label>Y :</label>
    <input type="number" @bind="EquipementViewModel.EditableEquipement.YEquipement" class="form-control" />

    <label>Z :</label>
    <input type="number" @bind="EquipementViewModel.EditableEquipement.ZEquipement" class="form-control" />

    <label>Mur :</label>
    <select @bind="EquipementViewModel.EditableEquipement.IdMur" class="form-control">
        <option value="">-- Sélectionnez un mur --</option>
        @foreach (var mur in EquipementViewModel.Murs)
        {
            <option value="@mur.IdMur">@mur.Direction @mur.Orientation @mur.NomSalle</option>
        }
    </select>

    <label>Type d'équipement :</label>
    <select @bind="EquipementViewModel.EditableEquipement.IdTypeEquipement" class="form-control">
        <option value="">-- Sélectionnez un type d'équipement --</option>
        @foreach (var typeequipement in EquipementViewModel.TypesEquipement)
        {
            <option value="@typeequipement.IdTypeEquipement">@typeequipement.NomTypeEquipement</option>
        }
    </select>

    <button class="btn btn-success" @onclick="SaveEquipement">Enregistrer</button>
    <button class="btn btn-secondary" @onclick="CancelEdit">Annuler</button>
</div>

@if (!string.IsNullOrEmpty(EquipementViewModel.ErrorMessage))
{
    <div class="alert alert-danger">
        @EquipementViewModel.ErrorMessage
    </div>
}

@code {
    protected override async Task OnInitializedAsync()
    {
        await EquipementViewModel.LoadEquipementsAsync();
        await EquipementViewModel.LoadMursAsync();
        await EquipementViewModel.LoadTypesEquipementAsync();
    }

    private async Task ViewDetails(int idEquipement)
    {
        await EquipementViewModel.LoadEquipementDetailsAsync(idEquipement);
    }

    private async Task EditEquipement(Client_SAE_5.DTO.EquipementDTO equipement)
    {
        var temp = await EquipementViewModel.LoadEquipementsDetailsWithoutDefAsync(equipement.IdEquipement);
        EquipementViewModel.EditEquipement(temp);
    }

    private async Task SaveEquipement()
    {
        if (EquipementViewModel.EditableEquipement.IdEquipement == 0)
        {
            await EquipementViewModel.AddEquipementAsync();
        }
        else
        {
            await EquipementViewModel.UpdateEquipementAsync();
        }
        EquipementViewModel.EditableEquipement = new Client_SAE_5.DTO.EquipementSansNavigationDTO(); // Réinitialiser
    }

    private async Task DeleteEquipement(int idEquipement)
    {
        await EquipementViewModel.DeleteEquipementAsync(idEquipement);
    }

    private void CancelEdit()
    {
        EquipementViewModel.EditableEquipement = new Client_SAE_5.DTO.EquipementSansNavigationDTO();
    }
}
