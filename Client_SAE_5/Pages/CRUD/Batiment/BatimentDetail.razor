@page "/crud/batiments/{IdBatiment:int}"
@inject Client_SAE_5.ViewModel.BatimentViewModel BatimentViewModel
@inject NavigationManager NavigationManager

<link rel="stylesheet" href="css/DetailPages.css" />

<PageTitle>Détails du bâtiment</PageTitle>

<h1>Détails du bâtiment</h1>

@if (BatimentViewModel.SelectedBatimentDetails == null)
{
    <p id="chargementPageContainer"><Spinner></Spinner> <p id="texteChargementDetail">Détails du bâtiment en chargement...</p></p>
}
else
{
    <div>
        <h3>@BatimentViewModel.SelectedBatimentDetails.NomBatiment</h3>
        @if (BatimentViewModel.SelectedBatimentDetails.Salles?.Count > 0)
        {

            <p><strong>Nombre de salles :</strong> @BatimentViewModel.SelectedBatimentDetails.Salles?.Count </p>

            <h3>Liste des salles</h3>

            <ul>
                @foreach (var salle in BatimentViewModel.SelectedBatimentDetails.Salles)
                {

                    <li class="listeCliquable" @onclick='(e=>Utils.Utils.GoDetail(NavigationManager, "salles", salle.IdSalle))'>@salle.NomSalle</li>

                }
            </ul>
        }
        else
        {
            <p><em>Aucune salle n'est associée à ce bâtiment.</em></p>
        }
    </div>
    
}

<button class="btn btn-secondary" @onclick="NavigateBack" id="backBtn">Retour</button>

@if (!string.IsNullOrEmpty(BatimentViewModel.ErrorMessage))
{
    <div class="alert alert-danger">
        @BatimentViewModel.ErrorMessage
    </div>
}


@code {
    [Parameter]
    public int IdBatiment { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        await BatimentViewModel.LoadBatimentDetailsAsync(IdBatiment);
    }

    private void NavigateBack()
    {
        NavigationManager.NavigateTo("/crud/batiments");
    }
}
