@page "/crud/batiments"
@inject Client_SAE_5.ViewModel.BatimentViewModel BatimentViewModel
@inject NavigationManager NavigationManager

<link rel="stylesheet" href="/css/DetailPages.css"/>

<PageTitle>Gestion des batiments</PageTitle>

<h1>Gestion des batiments</h1>
<button class="btn btn-success" @onclick="() => AddNewBatiment()">Ajouter un batiment</button>
<br />
<br />
@if (BatimentViewModel.DBData.Batiments == null || BatimentViewModel.DBData.Batiments.Count == 0)
{
    <div class="d-flex justify-content-center">
        <Spinner Type="SpinnerType.Border" Size="SpinnerSize.ExtraLarge"/>
    </div>
}
else
{

    <table class="table">
        <thead>
            <tr>
                <th>Nom</th>
                <th>Nombre de salle</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var batiment in BatimentViewModel.DBData.Batiments)
            {
                <tr class="selection" @onclick="() => ViewDetails(batiment.IdBatiment)">
                    <td>@batiment.NomBatiment</td>
                    <td>@batiment.NbSalle</td>
                    <td>
                        <button class="btn btn-primary" @onclick="() => EditBatiment(batiment)" @onclick:stopPropagation><Icon Name="IconName.PencilFill"></Icon></button>
                        <button class="btn btn-danger" @onclick="() => BeginDeleteConfirmation(batiment)" @onclick:stopPropagation><Icon Name="IconName.Trash3Fill"></Icon></button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

<!-- Modale pour l'édition -->
<Modal @ref="formModal" Size="ModalSize.Large" Title="Renseignement des informations du batiment">
    <BodyTemplate>
        <div>
            <label>Nom :</label>
            <input type="text" @bind="BatimentViewModel.BatimentInEdition.NomBatiment" class="form-control" />
        </div>
    </BodyTemplate>
    <FooterTemplate>
        <button class="btn btn-secondary" @onclick="CancelEdit">Annuler</button>
        @if (BatimentViewModel.BatimentInEdition.IdBatiment == 0)
        {
            <button class="btn btn-success" @onclick="SaveBatiment">Ajouter</button>
        }
        else
        {
            <button class="btn btn-primary" @onclick="SaveBatiment">Modifier</button>
        }

        @if (!string.IsNullOrEmpty(BatimentViewModel.ErrorMessage))
        {
            <div class="alert alert-danger">
                @BatimentViewModel.ErrorMessage
            </div>
        }
    </FooterTemplate>
</Modal>

<ConfirmDialog @ref="confirmSupprDialog" />

@code {
    private Modal formModal;
    private ConfirmDialog confirmSupprDialog = default!;
    private BatimentDTO? batimentDeleteInConfirmation;
    [Inject] ToastService ToastService { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        if (BatimentViewModel.DBData.Batiments == null || BatimentViewModel.DBData.Batiments.Count == 0)
        {
            await BatimentViewModel.LoadBatimentsAsync();
        }
    }

    private void ViewDetails(int idBatiment)
    {
        Utils.Utils.GoDetail(NavigationManager, "batiments", idBatiment);
        StateHasChanged();

        //await BatimentViewModel.LoadBatimentDetailsAsync(idBatiment);
    }

    private async Task EditBatiment(Client_SAE_5.DTO.BatimentDTO batiment)
    {
        await BatimentViewModel.SetupBatimentEdition(batiment.IdBatiment);
        OpenPopup();
    }

    private async Task AddNewBatiment()
    {
        await BatimentViewModel.SetupNewBatiment();
        OpenPopup();
    }

    private async Task SaveBatiment()
    {
        if (BatimentViewModel.BatimentInEdition.IdBatiment == 0)
        {
            await BatimentViewModel.AddBatimentAsync();
        }
        else
        {
            await BatimentViewModel.UpdatebatimentAsync();
        }
    }

    private async Task OpenDeleteConfirmation()
    {
        var options = new ConfirmDialogOptions
            {
                YesButtonText = "Supprimer",
                YesButtonColor = ButtonColor.Danger,
                NoButtonText = "Annuler",
                NoButtonColor = ButtonColor.Primary
            };

        if (batimentDeleteInConfirmation == null)
        {
            throw new ArgumentNullException("Le batiment dont on veut récupérer la confirmation de suppression est NULL.");
        }

        var confirmation = await confirmSupprDialog.ShowAsync(
            title: "Confirmer la suppression du batiment",
            message1: "Êtes vous sûr de vouloir supprimer le batiment \"" + batimentDeleteInConfirmation.NomBatiment + "\" ?",
            confirmDialogOptions: options);

        if (confirmation)
        {
            await DeleteBatiment(batimentDeleteInConfirmation.IdBatiment);
            ToastService.Notify(new ToastMessage(ToastType.Success, $"Le batiment a été supprimé avec succès"));
        }
    }

    private async Task BeginDeleteConfirmation(BatimentDTO batimentToConfirmDeletion)
    {
        batimentDeleteInConfirmation = batimentToConfirmDeletion;
        await OpenDeleteConfirmation();
    }

    private async Task DeleteBatiment(int idBatiment)
    {
        await BatimentViewModel.DeletebatimentAsync(idBatiment);
        StateHasChanged();
    }

    private async void ClosePopup()
    {
        BatimentViewModel.ResetError();
        await formModal.HideAsync();
    }

    private async void OpenPopup()
    {
        await formModal.ShowAsync();
    }

    private void CancelEdit()
    {
        ClosePopup();
    }
}
