@page "/crud/batiments"
@inject Client_SAE_5.ViewModel.BatimentViewModel BatimentViewModel
@inject NavigationManager NavigationManager

<link rel="stylesheet" href="/css/DetailPages.css" />
<Toasts class="p-3" Messages="messages" AutoHide="true" Delay="5000" Placement="ToastsPlacement.TopRight" />

<PageTitle>Gestion des bâtiments</PageTitle>

<h1>Gestion des bâtiments</h1>
<button id="btnAddBatimentPage" class="btn btn-success" @onclick="() => AddNewBatiment()">Ajouter un bâtiment</button>
<br />
<br />

@if (BatimentViewModel.DBData.Batiments == null || BatimentViewModel.DBData.Batiments.Count == 0)
{
    <div class="d-flex justify-content-center">
        <Spinner Type="SpinnerType.Border" Size="SpinnerSize.ExtraLarge" />
    </div>
}
else
{
    <Grid @ref="batimentGrid"
    TItem="BatimentDTO"
    DataProvider="BatimentsDataProvider"
    AllowFiltering="true"
    AllowPaging="true"
    PageSize="10"
    AllowSorting="true"
    FiltersTranslationProvider="Utils.BlazorBootstrapUtils.Instance.GridFiltersTranslationProvider"
    Class="table table-hover table-bordered"
    Responsive="true"
    AllowSelection="false"
    OnRowClick="ViewDetails"
    AllowRowClick="true"
    PaginationItemsTextFormat="{0} - {1} sur {2} bâtiments"
    ItemsPerPageText="Bâtiments par page"
    EmptyText="Aucun bâtiment trouvé"
    EnumFilterSelectText="Selection">
        <GridColumns>
            <GridColumn TItem="BatimentDTO" HeaderText="Nom" PropertyName="NomBatiment" SortKeySelector="item => item.NomBatiment">
                @context.NomBatiment
            </GridColumn>
            <GridColumn TItem="BatimentDTO" HeaderText="Nombre de salles" PropertyName="NbSalle" SortKeySelector="item => item.NbSalle">
                @context.NbSalle
            </GridColumn>
            <GridColumn TItem="BatimentDTO" HeaderText="Actions" Filterable="false">
                <button class="btn btn-primary" title="Modifier @context.NomBatiment" @onclick="() => EditBatiment(context)" @onclick:stopPropagation>
                    <Icon Name="IconName.PencilFill" />
                </button>
                <button class="btn btn-danger" title="Supprimer @context.NomBatiment" @onclick="() => BeginDeleteConfirmation(context)" @onclick:stopPropagation>
                    <Icon Name="IconName.Trash3Fill" />
                </button>
            </GridColumn>
        </GridColumns>
    </Grid>
}

<!-- Modale pour l'édition -->
<Modal @ref="formModal" class="editModal" Size="ModalSize.Large" Title="Renseignement des informations du bâtiment">
    <BodyTemplate>
        <div>
            <label>Nom :</label>
            <input type="text" @bind="BatimentViewModel.BatimentInEdition.NomBatiment" class="form-control" />
        </div>
    </BodyTemplate>
    <FooterTemplate>
        <button class="btn btn-secondary" id="annulerEditBatimentBtnDialog" @onclick="CancelEdit">Annuler</button>
        @if (BatimentViewModel.BatimentInEdition.IdBatiment == 0)
        {
            <button class="btn btn-success" id="ajouterBatimentBtnDialog"  @onclick="SaveBatiment">Ajouter</button>
        }
        else
        {
            <button class="btn btn-primary" id="modifierBatimentBtnDialog" @onclick="SaveBatiment">Modifier</button>
        }

        @if (!string.IsNullOrEmpty(BatimentViewModel.ErrorMessage))
        {
            <div class="alert alert-danger">
                @BatimentViewModel.ErrorMessage
            </div>
        }
    </FooterTemplate>
</Modal>

<ConfirmDialog @ref="confirmSupprDialog" />

@code {
    private Modal formModal;
    private Grid<BatimentDTO> batimentGrid;

    private ConfirmDialog confirmSupprDialog = default!;
    private BatimentDTO? batimentDeleteInConfirmation;
    List<ToastMessage> messages = new List<ToastMessage>();
    [Inject] ToastService ToastService { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        if (BatimentViewModel.DBData.Batiments == null || BatimentViewModel.DBData.Batiments.Count == 0)
        {
            await BatimentViewModel.LoadBatimentsAsync();
        }
    }

    private void ViewDetails(GridRowEventArgs<BatimentDTO> args)
    {
        Utils.Utils.GoDetail(NavigationManager, "batiments", args.Item.IdBatiment);
        StateHasChanged();
    }

    private async Task EditBatiment(BatimentDTO batiment)
    {
        await BatimentViewModel.SetupBatimentEdition(batiment.IdBatiment);
        OpenPopup();
    }

    private async Task AddNewBatiment()
    {
        await BatimentViewModel.SetupNewBatiment();
        OpenPopup();
    }

    private async Task SaveBatiment()
    {
        string confirmMessage = "";

        if (BatimentViewModel.BatimentInEdition.IdBatiment == 0)
        {
            await BatimentViewModel.AddBatimentAsync();
            confirmMessage = "Ajout du bâtiment avec succès !";
        }
        else
        {
            await BatimentViewModel.UpdatebatimentAsync();
            confirmMessage = "Modification du bâtiment avec succès !";
        }

        if (string.IsNullOrEmpty(BatimentViewModel.ErrorMessage))
        {
            ClosePopup();
            ToastService.Notify(new ToastMessage(ToastType.Success, confirmMessage));
            await RefreshGridAsync(); // Rafraîchir la GRID après une modification
        }
    }

    private async Task BeginDeleteConfirmation(BatimentDTO batiment)
    {
        batimentDeleteInConfirmation = batiment;
        await OpenDeleteConfirmation();
    }

    private async Task DeleteBatiment(int idBatiment)
    {
        await BatimentViewModel.DeletebatimentAsync(idBatiment);
        await RefreshGridAsync(); // Rafraîchir la GRID après une suppression
    }

    private async Task OpenDeleteConfirmation()
    {
        var options = new ConfirmDialogOptions
            {
                YesButtonText = "Supprimer",
                YesButtonColor = ButtonColor.Danger,
                NoButtonText = "Annuler",
                NoButtonColor = ButtonColor.Primary
            };

        if (batimentDeleteInConfirmation == null)
        {
            throw new ArgumentNullException("Le bâtiment dont on veut récupérer la confirmation de suppression est NULL.");
        }

        var confirmation = await confirmSupprDialog.ShowAsync(
            title: "Confirmer la suppression du bâtiment",
            message1: "Êtes vous sûr de vouloir supprimer le bâtiment \"" + batimentDeleteInConfirmation.NomBatiment + "\" ?",
            confirmDialogOptions: options);

        if (confirmation)
        {
            await DeleteBatiment(batimentDeleteInConfirmation.IdBatiment);
            ToastService.Notify(new ToastMessage(ToastType.Success, $"Le bâtiment a été supprimé avec succès"));
        }
    }

    private async Task RefreshGridAsync()
    {
        if (batimentGrid != null)
        {
            await batimentGrid.RefreshDataAsync(); // Rafraîchir la GRID
        }
    }

    private async Task<GridDataProviderResult<BatimentDTO>> BatimentsDataProvider(GridDataProviderRequest<BatimentDTO> request)
    {
        // Application des filtres, tri et pagination
        var data = request.ApplyTo(BatimentViewModel.DBData.Batiments);
        return await Task.FromResult(data);
    }

    private async void ClosePopup()
    {
        BatimentViewModel.ResetError();
        await formModal.HideAsync();
    }

    private async void OpenPopup()
    {
        await formModal.ShowAsync();
    }

    private void CancelEdit()
    {
        ClosePopup();
    }
}