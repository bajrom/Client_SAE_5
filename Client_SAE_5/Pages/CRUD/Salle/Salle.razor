@page "/crud/salles"
@inject Client_SAE_5.ViewModel.SalleViewModel SalleViewModel
@inject NavigationManager NavigationManager

<PageTitle>Gestion des Salles</PageTitle>

<h1>Gestion des Salles</h1>
<button class="btn btn-success" @onclick="() => AddNewSalle()">Ajouter une salle</button>
<br />
<br />
@if (SalleViewModel.DBData.Salles == null || SalleViewModel.DBData.Salles.Count == 0)
{
    <div class="d-flex justify-content-center">
        <Spinner Type="SpinnerType.Border" Size="SpinnerSize.ExtraLarge" />
    </div>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Nom de la Salle</th>
                <th>Bâtiment</th>
                <th>Type</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var salle in SalleViewModel.DBData.Salles)
            {
                <tr class="selection" @onclick="() => ViewDetails(salle.IdSalle)">
                    <td>@salle.NomSalle</td>
                    <td>@salle.NomBatiment</td>
                    <td>@salle.NomType</td>
                    <td>
                        <button class="btn btn-primary" @onclick="() => EditSalle(salle)" @onclick:stopPropagation><Icon Name="IconName.PencilFill"></Icon></button>
                        <button class="btn btn-danger" @onclick="() => BeginDeleteConfirmation(salle)" @onclick:stopPropagation><Icon Name="IconName.Trash3Fill"></Icon></button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

<!-- Modale pour l'édition -->
<Modal @ref="formModal" Size="ModalSize.Large" Title="Renseignement des informations de la salle">
    <BodyTemplate>
        <div>
            <label>Nom :</label>
            <input type="text" @bind="SalleViewModel.SalleInEdition.NomSalle" class="form-control" />
            <br />

            <label>Type de salle :</label>
            <select @bind="SalleViewModel.SalleInEdition.TypeSalle.IdTypeSalle" class="form-control">
                @if (SalleViewModel.SalleInEdition.TypeSalle.IdTypeSalle == 0)
                {
                    <option selected value="0">--- Sélectionnez un type de salle ---</option>
                }
                @foreach (var typesalle in SalleViewModel.DBData.TypesSalle)
                {
                    <option value="@typesalle.IdTypeSalle">@typesalle.NomTypeSalle</option>
                }
            </select>

            <label>Bâtiment :</label>
            <select @bind="SalleViewModel.SalleInEdition.Batiment.IdBatiment" class="form-control">
                @if (SalleViewModel.SalleInEdition.Batiment.IdBatiment == 0)
                {
                    <option selected value="0">--- Sélectionnez un bâtiment ---</option>
                }
                @foreach (var batiment in SalleViewModel.DBData.Batiments)
                {
                    <option value="@batiment.IdBatiment">@batiment.NomBatiment</option>
                }
            </select>
        </div>
    </BodyTemplate>
    <FooterTemplate>
        <button class="btn btn-secondary" @onclick="CancelEdit">Annuler</button>
        @if (SalleViewModel.SalleInEdition.IdSalle == 0)
        {
            <button class="btn btn-success" @onclick="SaveSalle">Ajouter</button>
        }
        else
        {
            <button class="btn btn-primary" @onclick="SaveSalle">Modifier</button>
        }

        @if (!string.IsNullOrEmpty(SalleViewModel.ErrorMessage))
        {
            <div class="alert alert-danger">
                @SalleViewModel.ErrorMessage
            </div>
        }
    </FooterTemplate>
</Modal>

<ConfirmDialog @ref="confirmSupprDialog" />

@code {
    private Modal formModal;

    private ConfirmDialog confirmSupprDialog = default!;
    List<ToastMessage> messages = new List<ToastMessage>();
    [Inject] ToastService ToastService { get; set; } = default!;

    private SalleDTO? salleDeleteInConfirmation;

    protected override async Task OnInitializedAsync()
    {
        if (SalleViewModel.DBData.Salles == null || SalleViewModel.DBData.Salles.Count == 0)
        {
            await SalleViewModel.LoadSallesAsync();
        }
    }

    private async void ClosePopup()
    {
        SalleViewModel.ResetError();
        await formModal.HideAsync();
    }

    private async void OpenPopup()
    {
        await formModal.ShowAsync();
    }

    private void ViewDetails(int idSalle)
    {
        Utils.Utils.GoDetail(NavigationManager, "salles", idSalle);
        //await SalleViewModel.LoadSalleDetailsAsync(idSalle);
        StateHasChanged();
    }

    private async Task EditSalle(Client_SAE_5.DTO.SalleDTO salle)
    {
        await SalleViewModel.SetupSalleEdition(salle.IdSalle);
        OpenPopup();
    }

    private async Task AddNewSalle()
    {
        await SalleViewModel.SetupNewSalle();
        OpenPopup();
    }

    private async Task SaveSalle()
    {
        if (SalleViewModel.SalleInEdition.IdSalle == 0)
        {
            await SalleViewModel.AddSalleAsync();
        }
        else
        {
            await SalleViewModel.UpdateSalleAsync();
        }

        if (string.IsNullOrEmpty(SalleViewModel.ErrorMessage))
        {
            ClosePopup();
            StateHasChanged();
        }
    }

    private async Task OpenDeleteConfirmation()
    {
        var options = new ConfirmDialogOptions
            {
                YesButtonText = "Supprimer",
                YesButtonColor = ButtonColor.Danger,
                NoButtonText = "Annuler",
                NoButtonColor = ButtonColor.Primary
            };

        if (salleDeleteInConfirmation == null)
        {
            throw new ArgumentNullException("La salle dont on veut récupérer la confirmation de suppression est NULL.");
        }

        var confirmation = await confirmSupprDialog.ShowAsync(
            title: "Confirmer la suppression de la salle",
            message1: "Êtes vous sûr de vouloir supprimer la salle \"" + salleDeleteInConfirmation.NomSalle + "\" dans le bâtiments \"" + salleDeleteInConfirmation.NomBatiment + " de type \"" + salleDeleteInConfirmation.NomType + "\" ?",
            confirmDialogOptions: options);

        if (confirmation)
        {
            await DeleteSalle(salleDeleteInConfirmation.IdSalle);
            ToastService.Notify(new ToastMessage(ToastType.Success, $"La salle a été supprimé avec succès"));
        }
    }

    private async Task BeginDeleteConfirmation(SalleDTO salleToConfirmDeletion)
    {
        salleDeleteInConfirmation = salleToConfirmDeletion;
        await OpenDeleteConfirmation();
    }

    private async Task DeleteSalle(int idSalle)
    {
        await SalleViewModel.DeleteSalleAsync(idSalle);
        StateHasChanged();
    }

    private void CancelEdit()
    {
        ClosePopup();
    }
}
