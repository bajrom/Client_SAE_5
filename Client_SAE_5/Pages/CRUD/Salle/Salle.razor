@page "/crud/salles"
@inject Client_SAE_5.ViewModel.SalleViewModel SalleViewModel
@inject NavigationManager NavigationManager

<PageTitle>Gestion des Salles</PageTitle>

<h1>Gestion des Salles</h1>

@if (SalleViewModel.Salles == null || SalleViewModel.Salles.Count == 0)
{
    <Spinner></Spinner>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Nom de la Salle</th>
                <th>Bâtiment</th>
                <th>Type</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var salle in SalleViewModel.Salles)
            {
                <tr class="selection" @onclick="() => ViewDetails(salle.IdSalle)">
                    <td>@salle.NomSalle</td>
                    <td>@salle.NomBatiment</td>
                    <td>@salle.NomType</td>
                    <td>
                        <button class="btn btn-primary" @onclick="() => EditSalle(salle)" @onclick:stopPropagation><Icon Name="IconName.PencilFill"></Icon></button>
                        <button class="btn btn-danger" @onclick="() => DeleteSalle(salle.IdSalle)" @onclick:stopPropagation><Icon Name="IconName.Trash3Fill"></Icon></button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

<h2>Ajouter ou Modifier une Salle</h2>
<div>
    <label>Nom de la Salle :</label>
    <input type="text" @bind="SalleViewModel.EditableSalle.NomSalle" class="form-control" />

    <label>Batiment :</label>
    <select @bind="SalleViewModel.EditableSalle.IdBatiment" class="form-control">
        <option value="">-- Sélectionnez un batiment --</option>
        @foreach (var batiment in SalleViewModel.Batiments)
        {
            <option value="@batiment.IdBatiment">@batiment.NomBatiment</option>
        }
    </select>

    <label>Type de salle :</label>
    <select @bind="SalleViewModel.EditableSalle.IdTypeSalle" class="form-control">
        <option value="">-- Sélectionnez un type de salle --</option>
        @foreach (var typesalle in SalleViewModel.TypeSalle)
        {
            <option value="@typesalle.IdTypeSalle">@typesalle.NomTypeSalle</option>
        }
    </select>

    <button class="btn btn-success" @onclick="SaveSalle">Enregistrer</button>
    <button class="btn btn-secondary" @onclick="CancelEdit">Annuler</button>
</div>

@if (!string.IsNullOrEmpty(SalleViewModel.ErrorMessage))
{
    <div class="alert alert-danger">
        @SalleViewModel.ErrorMessage
    </div>
}

@code {
    protected override async Task OnInitializedAsync()
    {
        await SalleViewModel.LoadSallesAsync();
        await SalleViewModel.LoadBatimentsAsync();
        await SalleViewModel.LoadTypeSalleAsync();
    }

    private async Task ViewDetails(int idSalle)
    {
        Utils.Utils.GoDetail(NavigationManager, "salles", idSalle);
        //await SalleViewModel.LoadSalleDetailsAsync(idSalle);
    }

    private async Task EditSalle(Client_SAE_5.DTO.SalleDTO salle)
    {
        var temp = await SalleViewModel.LoadSalleDetailsWithoutDefAsync(salle.IdSalle);
        SalleViewModel.EditSalle(temp);
    }

    private async Task SaveSalle()
    {
        if (SalleViewModel.EditableSalle.IdSalle == 0)
        {
            await SalleViewModel.AddSalleAsync();
        }
        else
        {
            await SalleViewModel.UpdateSalleAsync();
        }
    }

    private async Task DeleteSalle(int idSalle)
    {
        await SalleViewModel.DeleteSalleAsync(idSalle);
    }

    private void CancelEdit()
    {
        SalleViewModel.EditableSalle = new Client_SAE_5.DTO.SalleSansNavigationDTO();
    }
}
