@page "/crud/salles"
@inject Client_SAE_5.ViewModel.SalleViewModel SalleViewModel
@inject NavigationManager NavigationManager

<Toasts class="p-3" Messages="messages" AutoHide="true" Delay="5000" Placement="ToastsPlacement.TopRight" />

<PageTitle>Gestion des Salles</PageTitle>

<h1>Gestion des Salles</h1>
<button class="btn btn-success" @onclick="() => AddNewSalle()">Ajouter une salle</button>
<br />
<br />

@if (SalleViewModel.DBData.Salles == null || SalleViewModel.DBData.Salles.Count == 0)
{
    <div class="d-flex justify-content-center">
        <Spinner Type="SpinnerType.Border" Size="SpinnerSize.ExtraLarge" />
    </div>
}
else
{
    <Grid @ref="salleGrid"
          TItem="SalleDTO"
          DataProvider="SallesDataProvider"
          AllowFiltering="true"
          AllowPaging="true"
          PageSize="10"
          AllowSorting="true"
          FiltersTranslationProvider="Utils.BlazorBootstrapUtils.Instance.GridFiltersTranslationProvider"
          Class="table table-hover table-bordered"
          Responsive="true"
          AllowSelection="false"
          OnRowClick="ViewDetails"
          AllowRowClick="true"
          PaginationItemsTextFormat="{0} - {1} sur {2} salles"
          ItemsPerPageText="Salles par page"
          EmptyText="Aucune salle trouvée"
          EnumFilterSelectText="Selection">
        <GridColumns>
            <GridColumn TItem="SalleDTO" HeaderText="Nom de la Salle" PropertyName="NomSalle" SortKeySelector="item => item.NomSalle">
                @context.NomSalle
            </GridColumn>
            <GridColumn TItem="SalleDTO" HeaderText="Bâtiment" PropertyName="NomBatiment" SortKeySelector="item => item.NomBatiment">
                @context.NomBatiment
            </GridColumn>
            <GridColumn TItem="SalleDTO" HeaderText="Type" PropertyName="NomType" SortKeySelector="item => item.NomType">
                @context.NomType
            </GridColumn>
            <GridColumn TItem="SalleDTO" HeaderText="Actions" Filterable="false">
                <button class="btn btn-primary" title="Modifier @context.NomSalle" @onclick="() => EditSalle(context)" @onclick:stopPropagation>
                    <Icon Name="IconName.PencilFill" />
                </button>
                <button class="btn btn-danger" title="Supprimer @context.NomSalle" @onclick="() => BeginDeleteConfirmation(context)" @onclick:stopPropagation>
                    <Icon Name="IconName.Trash3Fill" />
                </button>
            </GridColumn>
        </GridColumns>
    </Grid>
}

<!-- Modale pour l'édition -->
<Modal @ref="formModal" Size="ModalSize.Large" Title="Renseignement des informations de la salle">
    <BodyTemplate>
        @if (!string.IsNullOrEmpty(SalleViewModel.ErrorMessage))
        {
            <div class="alert alert-danger">
                @SalleViewModel.ErrorMessage
            </div>
        }

        <div>
            <label>Nom :</label>
            <input type="text" @bind="SalleViewModel.SalleInEdition.NomSalle" class="form-control" />
            <br />

            <label>Type de salle :</label>
            <select @bind="SalleViewModel.SalleInEdition.TypeSalle.IdTypeSalle" class="form-control">
                @if (SalleViewModel.SalleInEdition.TypeSalle.IdTypeSalle == 0)
                {
                    <option selected value="0">--- Sélectionnez un type de salle ---</option>
                }
                @foreach (var typesalle in SalleViewModel.DBData.TypesSalle)
                {
                    <option value="@typesalle.IdTypeSalle">@typesalle.NomTypeSalle</option>
                }
            </select>

            <label>Bâtiment :</label>
            <select @bind="SalleViewModel.SalleInEdition.Batiment.IdBatiment" class="form-control">
                @if (SalleViewModel.SalleInEdition.Batiment.IdBatiment == 0)
                {
                    <option selected value="0">--- Sélectionnez un bâtiment ---</option>
                }
                @foreach (var batiment in SalleViewModel.DBData.Batiments)
                {
                    <option value="@batiment.IdBatiment">@batiment.NomBatiment</option>
                }
            </select>
        </div>
    </BodyTemplate>
    <FooterTemplate>
        <button class="btn btn-secondary" @onclick="ClosePopup">Annuler</button>
        @if (SalleViewModel.SalleInEdition.IdSalle == 0)
        {
            <button class="btn btn-success" @onclick="SaveSalle">Ajouter</button>
        }
        else
        {
            <button class="btn btn-primary" @onclick="SaveSalle">Modifier</button>
        }
    </FooterTemplate>
</Modal>

<ConfirmDialog @ref="confirmSupprDialog" />

@code {
    private Modal formModal;
    private Grid<SalleDTO> salleGrid;

    private ConfirmDialog confirmSupprDialog = default!;
    List<ToastMessage> messages = new List<ToastMessage>();
    [Inject] ToastService ToastService { get; set; } = default!;

    private SalleDTO? salleDeleteInConfirmation;

    /// <summary>
    /// Méthode exécutée lors de l'initialisation de la page
    /// </summary>
    protected override async Task OnInitializedAsync()
    {
        if (SalleViewModel.DBData.Salles == null || SalleViewModel.DBData.Salles.Count == 0)
        {
            await SalleViewModel.LoadSallesAsync();
        }
    }

    /// <summary>
    /// Permet de fermer la pop up de façon asynchrone
    /// <see cref="formModal"/>
    /// </summary>
    private async void ClosePopup()
    {
        SalleViewModel.ResetError();
        await formModal.HideAsync();
    }

    /// <summary>
    /// Permet d'ouvrir la pop up de façon asynchrone
    /// </summary>
    private async void OpenPopup()
    {
        await formModal.ShowAsync();
    }

    /// <summary>
    /// Permet de naviguer sur la page de détails d'une salle à partir de la grille des salles
    /// </summary>
    /// <param name="args">Ligne de la GRID</param>
    private void ViewDetails(GridRowEventArgs<SalleDTO> args)
    {
        Utils.Utils.GoDetail(NavigationManager, "salles", args.Item.IdSalle);
        StateHasChanged();
    }

    /// <summary>
    /// Permet d'éditer une salle de façon asynchrone
    /// </summary>
    /// <param name="salle">Salle DTO à éditer</param>
    private async Task EditSalle(SalleDTO salle)
    {
        await SalleViewModel.SetupSalleEdition(salle.IdSalle);
        OpenPopup();
    }

    /// <summary>
    /// Permet d'ajouter une nouvelle salle de façon asynchrone
    /// </summary>
    private async Task AddNewSalle()
    {
        await SalleViewModel.SetupNewSalle();
        OpenPopup();
    }

    /// <summary>
    /// Permet de sauvegarder une salle une fois qu'il a été ajouté ou modifié
    /// </summary>
    private async Task SaveSalle()
    {
        string confirmMessage = "";

        if (SalleViewModel.SalleInEdition.IdSalle == 0)
        {
            await SalleViewModel.AddSalleAsync();
            confirmMessage = "Ajout de la salle avec succès !";
        }
        else
        {
            await SalleViewModel.UpdateSalleAsync();
            confirmMessage = "Modification de la salle avec succès !";
        }

        if (string.IsNullOrEmpty(SalleViewModel.ErrorMessage))
        {
            ClosePopup();
            ToastService.Notify(new ToastMessage(ToastType.Success, confirmMessage));
            await RefreshGridAsync(); // Rafraîchir la GRID après une modification
        }
    }

    /// <summary>
    /// Permet de démarrer la suppression d'une salle
    /// </summary>
    /// <param name="salle">Capteur (DTO) à supprimer</param>
    private async Task BeginDeleteConfirmation(SalleDTO salle)
    {
        salleDeleteInConfirmation = salle;
        await OpenDeleteConfirmation();
    }

    /// <summary>
    /// Permet de supprimer une salle, selon son ID, de façon asynchrone
    /// </summary>
    /// <param name="idSalle">ID de la salle à supprimer</param>
    private async Task DeleteSalle(int idSalle)
    {
        await SalleViewModel.DeleteSalleAsync(idSalle);
        await RefreshGridAsync(); // Rafraîchir la GRID après une suppression
    }

    /// <summary>
    /// Ouvrir la fenêtre de confirmation de suppression d'une salle
    /// </summary>
    /// <exception cref="ArgumentNullException"></exception>
    private async Task OpenDeleteConfirmation()
    {
        var options = new ConfirmDialogOptions
            {
                YesButtonText = "Supprimer",
                YesButtonColor = ButtonColor.Danger,
                NoButtonText = "Annuler",
                NoButtonColor = ButtonColor.Primary
            };

        if (salleDeleteInConfirmation == null)
        {
            throw new ArgumentNullException("La salle dont on veut récupérer la confirmation de suppression est NULL.");
        }

        var confirmation = await confirmSupprDialog.ShowAsync(
            title: "Confirmer la suppression de la salle",
            message1: "Êtes vous sûr de vouloir supprimer la salle \"" + salleDeleteInConfirmation.NomSalle + "\" dans le bâtiments \"" + salleDeleteInConfirmation.NomBatiment + " de type \"" + salleDeleteInConfirmation.NomType + "\" ?",
            confirmDialogOptions: options);

        if (confirmation)
        {
            await DeleteSalle(salleDeleteInConfirmation.IdSalle);
            ToastService.Notify(new ToastMessage(ToastType.Success, $"La salle a été supprimé avec succès"));
            await RefreshGridAsync();
        }
    }

    /// <summary>
    /// Rafraîchit la grille de la salle de façon asynchrone
    /// </summary>
    /// <see cref="salleGrid"></see>
    /// <exception cref="NullReferenceException"></exception>
    private async Task RefreshGridAsync()
    {
        Console.WriteLine(salleGrid == null);
        if (salleGrid != null)
        {
            await salleGrid.RefreshDataAsync(); // Rafraîchir la GRID
        }
    }

    /// <summary>
    /// Permet de récupérer les données nécéssaires pour remplir la grille des salles
    /// </summary>
    /// <param name="request">Requête d'ajout</param>
    private async Task<GridDataProviderResult<SalleDTO>> SallesDataProvider(GridDataProviderRequest<SalleDTO> request)
    {
        // Application des filtres, tri et pagination
        var data = request.ApplyTo(SalleViewModel.DBData.Salles);
        return await Task.FromResult(data);
    }
}