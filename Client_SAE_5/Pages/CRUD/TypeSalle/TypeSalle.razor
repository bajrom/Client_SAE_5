@page "/crud/typessalle"
@inject Client_SAE_5.ViewModel.TypeSalleViewModel TypeSalleViewModel
@inject NavigationManager NavigationManager

<PageTitle>Gestion des types de salles</PageTitle>

<h1>Gestion des types de salles</h1>

@if (TypeSalleViewModel.TypeSalles == null || TypeSalleViewModel.TypeSalles.Count == 0)
{
    <Spinner></Spinner>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Nom</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var typesalle in TypeSalleViewModel.TypeSalles)
            {
                <tr class="selection" @onclick="() => ViewDetails(typesalle.IdTypeSalle)">
                    <td>@typesalle.NomTypeSalle</td>
                    <td>
                        <button class="btn btn-primary" @onclick="() => EditTypeSalle(typesalle)"><Icon Name="IconName.PencilFill"></Icon></button>
                        <button class="btn btn-danger" @onclick="() => DeleteTypeSalle(typesalle.IdTypeSalle)"><Icon Name="IconName.Trash3Fill"></Icon></button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@* @if (TypeSalleViewModel.SelectedTypeSalleDetails != null)
{
    <h2>Détails du type de salle:</h2>

    <h3>Salles</h3>
    @if (TypeSalleViewModel.SelectedTypeSalleDetails.Salles?.Count > 0)
    {
        <ul>
            @foreach (var salle in TypeSalleViewModel.SelectedTypeSalleDetails.Salles)
            {
                <li>@salle.NomSalle</li>
            }
        </ul>
    }
    else
    {
        <p><em>Aucune salle</em></p>
    }
} *@

<h2>Ajouter ou Modifier un type de salle</h2>
<div>
    <label>Nom :</label>
    <input type="text" @bind="TypeSalleViewModel.EditableTypeSalle.NomTypeSalle" class="form-control" />

    <button class="btn btn-success" @onclick="SaveTypeSalle">Enregistrer</button>
    <button class="btn btn-secondary" @onclick="CancelEdit">Annuler</button>
</div>

@if (!string.IsNullOrEmpty(TypeSalleViewModel.ErrorMessage))
{
    <div class="alert alert-danger">
        @TypeSalleViewModel.ErrorMessage
    </div>
}

@code {
    protected override async Task OnInitializedAsync()
    {
        await TypeSalleViewModel.LoadTypesSallesAsync();
    }

    private async Task ViewDetails(int idTypeSalle)
    {
        Utils.Utils.GoDetail(NavigationManager, "typessalle", idTypeSalle);
        //await TypeSalleViewModel.LoadTypeSalleDetailsAsync(idTypeSalle);
    }

    private async Task EditTypeSalle(Client_SAE_5.DTO.TypeSalleDTO typeSalle)
    {
        var temp = await TypeSalleViewModel.LoadTypeSalleDetailsWithoutDefAsync(typeSalle.IdTypeSalle);
        TypeSalleViewModel.EditTypeSalle(temp);
    }

    private async Task SaveTypeSalle()
    {
        if (TypeSalleViewModel.EditableTypeSalle.IdTypeSalle == 0)
        {
            await TypeSalleViewModel.AddTypeSallesAsync();
        }
        else
        {
            await TypeSalleViewModel.UpdateTypeSallesAsync();
        }
    }

    private async Task DeleteTypeSalle(int idTypeSalle)
    {
        await TypeSalleViewModel.DeleteTypeSalleAsync(idTypeSalle);
    }

    private void CancelEdit()
    {
        TypeSalleViewModel.EditableTypeSalle = new Client_SAE_5.DTO.TypeSalleDTO();
    }
}
