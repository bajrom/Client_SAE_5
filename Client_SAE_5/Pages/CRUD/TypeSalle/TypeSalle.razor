@page "/crud/typessalle"
@inject Client_SAE_5.ViewModel.TypeSalleViewModel TypeSalleViewModel
@inject NavigationManager NavigationManager

<Toasts class="p-3" Messages="messages" AutoHide="true" Delay="5000" Placement="ToastsPlacement.TopRight" />

<PageTitle>Gestion des types de salle</PageTitle>

<h1>Gestion des types de salle</h1>
<button class="btn btn-success" @onclick="() => AddNewTypeSalle()">Ajouter un type de salle</button>
<br />
<br />

@if (TypeSalleViewModel.DBData.TypesSalle == null || TypeSalleViewModel.DBData.TypesSalle.Count == 0)
{
    <div class="d-flex justify-content-center">
        <Spinner Type="SpinnerType.Border" Size="SpinnerSize.ExtraLarge" />
    </div>
}
else
{
    <Grid @ref="typeSalleGrid"
          TItem="TypeSalleDTO"
          DataProvider="TypesSalleDataProvider"
          AllowFiltering="true"
          AllowPaging="true"
          PageSize="10"
          AllowSorting="true"
          FiltersTranslationProvider="Utils.BlazorBootstrapUtils.Instance.GridFiltersTranslationProvider"
          Class="table table-hover table-bordered"
          Responsive="true"
          AllowSelection="false"
          OnRowClick="ViewDetails"
          AllowRowClick="true"
          PaginationItemsTextFormat="{0} - {1} sur {2} types de salle"
          ItemsPerPageText="Types de salle par page"
          EmptyText="Aucun type de salle trouvé"
          EnumFilterSelectText="Selection">
        <GridColumns>
            <GridColumn TItem="TypeSalleDTO" HeaderText="Nom" PropertyName="NomTypeSalle" SortKeySelector="item => item.NomTypeSalle">
                @context.NomTypeSalle
            </GridColumn>
            <GridColumn TItem="TypeSalleDTO" HeaderText="Actions" Filterable="false">
                <button class="btn btn-primary" title="Modifier @context.NomTypeSalle" @onclick="() => EditTypeSalle(context)" @onclick:stopPropagation>
                    <Icon Name="IconName.PencilFill" />
                </button>
                <button class="btn btn-danger" title="Supprimer @context.NomTypeSalle" @onclick="() => BeginDeleteConfirmation(context)" @onclick:stopPropagation>
                    <Icon Name="IconName.Trash3Fill" />
                </button>
            </GridColumn>
        </GridColumns>
    </Grid>
}

<!-- Modale pour l'édition -->
<Modal @ref="formModal" Size="ModalSize.Large" Title="Renseignement des informations du type de salle">
    <BodyTemplate>
        <div>
            <label>Nom :</label>
            <input type="text" @bind="TypeSalleViewModel.TypesalleInEdition.NomTypeSalle" class="form-control" />
        </div>
    </BodyTemplate>
    <FooterTemplate>
        <button class="btn btn-secondary" @onclick="CancelEdit">Annuler</button>
        @if (TypeSalleViewModel.TypesalleInEdition.IdTypeSalle == 0)
        {
            <button class="btn btn-success" @onclick="SaveTypeSalle">Ajouter</button>
        }
        else
        {
            <button class="btn btn-primary" @onclick="SaveTypeSalle">Modifier</button>
        }

        @if (!string.IsNullOrEmpty(TypeSalleViewModel.ErrorMessage))
        {
            <div class="alert alert-danger">
                @TypeSalleViewModel.ErrorMessage
            </div>
        }
    </FooterTemplate>
</Modal>

<ConfirmDialog @ref="confirmSupprDialog" />

@code {
    private Modal formModal;
    private Grid<TypeSalleDTO> typeSalleGrid;

    private ConfirmDialog confirmSupprDialog = default!;
    private TypeSalleDTO? typesalleDeleteInConfirmation;
    List<ToastMessage> messages = new List<ToastMessage>();
    [Inject] ToastService ToastService { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        if (TypeSalleViewModel.DBData.TypesSalle == null || TypeSalleViewModel.DBData.TypesSalle.Count == 0)
        {
            await TypeSalleViewModel.LoadTypesSallesAsync();
        }
    }

    private void ViewDetails(GridRowEventArgs<TypeSalleDTO> args)
    {
        Utils.Utils.GoDetail(NavigationManager, "typessalle", args.Item.IdTypeSalle);
        StateHasChanged();
    }

    private async Task EditTypeSalle(TypeSalleDTO typeSalle)
    {
        await TypeSalleViewModel.SetupTypeSalleEdition(typeSalle.IdTypeSalle);
        OpenPopup();
    }

    private async Task AddNewTypeSalle()
    {
        await TypeSalleViewModel.SetupNewTypeSalle();
        OpenPopup();
    }

    private async Task SaveTypeSalle()
    {
        string confirmMessage = "";

        if (TypeSalleViewModel.TypesalleInEdition.IdTypeSalle == 0)
        {
            await TypeSalleViewModel.AddTypeSallesAsync();
            confirmMessage = "Ajout du type de salle avec succès !";
        }
        else
        {
            await TypeSalleViewModel.UpdateTypeSallesAsync();
            confirmMessage = "Modification du type de salle avec succès !";
        }

        if (string.IsNullOrEmpty(TypeSalleViewModel.ErrorMessage))
        {
            ClosePopup();
            ToastService.Notify(new ToastMessage(ToastType.Success, confirmMessage));
            await RefreshGridAsync(); // Rafraîchir la GRID après une modification
        }
    }

    private async Task BeginDeleteConfirmation(TypeSalleDTO typeSalle)
    {
        typesalleDeleteInConfirmation = typeSalle;
        await OpenDeleteConfirmation();
    }

    private async Task DeleteTypeSalle(int idTypeSalle)
    {
        await TypeSalleViewModel.DeleteTypeSalleAsync(idTypeSalle);
        await RefreshGridAsync(); // Rafraîchir la GRID après une suppression
    }

    private async Task OpenDeleteConfirmation()
    {
        var options = new ConfirmDialogOptions
            {
                YesButtonText = "Supprimer",
                YesButtonColor = ButtonColor.Danger,
                NoButtonText = "Annuler",
                NoButtonColor = ButtonColor.Primary
            };

        if (typesalleDeleteInConfirmation == null)
        {
            throw new ArgumentNullException("Le type de salle dont on veut récupérer la confirmation de suppression est NULL.");
        }

        var confirmation = await confirmSupprDialog.ShowAsync(
            title: "Confirmer la suppression du type de salle",
            message1: "Êtes vous sûr de vouloir supprimer le type de salle \"" + typesalleDeleteInConfirmation.NomTypeSalle + "\" ?",
            confirmDialogOptions: options);

        if (confirmation)
        {
            await DeleteTypeSalle(typesalleDeleteInConfirmation.IdTypeSalle);
            ToastService.Notify(new ToastMessage(ToastType.Success, $"Le type de salle a été supprimé avec succès"));
        }
    }

    private async Task RefreshGridAsync()
    {
        if (typeSalleGrid != null)
        {
            await typeSalleGrid.RefreshDataAsync(); // Rafraîchir la GRID
        }
    }

    private async Task<GridDataProviderResult<TypeSalleDTO>> TypesSalleDataProvider(GridDataProviderRequest<TypeSalleDTO> request)
    {
        // Application des filtres, tri et pagination
        var data = request.ApplyTo(TypeSalleViewModel.DBData.TypesSalle);
        return await Task.FromResult(data);
    }

    private async void ClosePopup()
    {
        TypeSalleViewModel.ResetError();
        await formModal.HideAsync();
    }

    private async void OpenPopup()
    {
        await formModal.ShowAsync();
    }

    private void CancelEdit()
    {
        ClosePopup();
    }
}