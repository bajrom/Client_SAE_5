@page "/crud/capteurs"
@inject Client_SAE_5.ViewModel.CapteurViewModel CapteurViewModel
@inject NavigationManager NavigationManager

<Toasts class="p-3" Messages="messages" AutoHide="true" Delay="5000" Placement="ToastsPlacement.TopRight" />

<PageTitle>Gestion des Capteurs</PageTitle>

<h1>Gestion des Capteurs</h1>

<button class="btn btn-success" @onclick="() => AddNewCapteur()">Ajouter un capteur</button>
<br />
<br />
@if (CapteurViewModel.Capteurs == null || CapteurViewModel.Capteurs.Count == 0)
{
    <Spinner></Spinner>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Nom</th>
                <th>Salle</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var capteur in CapteurViewModel.Capteurs)
            {
                <tr class="selection" @onclick="() => ViewDetails(capteur.IdCapteur)">
                    <td>@capteur.NomCapteur</td>
                    <td>@capteur.NomSalle</td>
                    <td>
                        <button class="btn btn-primary" @onclick="() => EditCapteur(capteur)" @onclick:stopPropagation><Icon Name="IconName.PencilFill"></Icon></button>
                        <button class="btn btn-danger" @onclick="() => BeginDeleteConfirmation(capteur)" @onclick:stopPropagation><Icon Name="IconName.Trash3Fill"></Icon></button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}


<!-- Modale pour l'édition -->
<Modal @ref="formModal" Size="ModalSize.Large" Title="Renseignement des informations du capteur">
    <BodyTemplate>
        <div>
            <label>Nom :</label>
            <input type="text" @bind="CapteurViewModel.newCapteur.NomCapteur" class="form-control" />

            <label>Est actif ? :</label>
            <div>
                <label>OUI</label>
                <input type="radio" checked="@(CapteurViewModel.newCapteur.EstActif == "OUI")" 
                       @onchange="@(() => CapteurViewModel.newCapteur.EstActif = "OUI")" />
                <label>NON</label>
                <input type="radio" checked="@(CapteurViewModel.newCapteur.EstActif == "NON")" 
                       @onchange="@(() => CapteurViewModel.newCapteur.EstActif = "NON")" />
                <label>NSP</label>
                <input type="radio" checked="@(CapteurViewModel.newCapteur.EstActif == "NSP")" 
                       @onchange="@(() => CapteurViewModel.newCapteur.EstActif = "NSP")" />
            </div>

            <label>X :</label>
            <input type="number" @bind="CapteurViewModel.newCapteur.XCapteur" class="form-control" />

            <label>Y :</label>
            <input type="number" @bind="CapteurViewModel.newCapteur.YCapteur" class="form-control" />

            <label>Z :</label>
            <input type="number" @bind="CapteurViewModel.newCapteur.ZCapteur" class="form-control" />

            <label>Mur :</label>
            <select @bind="CapteurViewModel.newCapteur.IdMur" class="form-control">
                @foreach (var mur in CapteurViewModel.Murs)
                {
                    <option value="@mur.IdMur">Mur @mur.Direction orienté @Math.Round(mur.Orientation)° salle @mur.NomSalle</option>
                }
            </select>

            <label>Unités :</label>
            <div id="divUnitesCapteur">
                @foreach (var unite in CapteurViewModel.Unites)
                {
                    <div class="form-check">
                        <label class="form-check-label">@unite.NomUnite (@unite.SigleUnite)</label>
                        <input value="@unite.IdUnite" type="checkbox" class="form-check-input" checked="@CapteurViewModel.CapteurInEdition.Unites.Any(u => u.IdUnite == unite.IdUnite)" @onchange="(e) => CapteurViewModel.ChangeSelectedUnites(unite, (bool)e.Value)" />
                    </div>
                }
            </div>

        </div>
    </BodyTemplate>
    <FooterTemplate>
        <button class="btn btn-secondary" @onclick="CancelEdit">Annuler</button>
        @if (CapteurViewModel.newCapteur.IdCapteur == 0)
        {
            <button class="btn btn-success" @onclick="SaveCapteur">Ajouter</button>
        }
        else
        {
            <button class="btn btn-primary" @onclick="SaveCapteur">Modifier</button>
        }
    </FooterTemplate>
</Modal>

<ConfirmDialog @ref="confirmSupprDialog" />

@* @if (CapteurViewModel.SelectedCapteurDetail != null)
{
    <h2>Détails du capteur</h2>
    <p><strong>Nom :</strong> @CapteurViewModel.SelectedCapteurDetail.NomCapteur</p>
    <p><strong>Est actif :</strong> @CapteurViewModel.SelectedCapteurDetail.EstActif</p>
    <p><strong>X :</strong> @CapteurViewModel.SelectedCapteurDetail.XCapteur</p>
    <p><strong>Y :</strong> @CapteurViewModel.SelectedCapteurDetail.YCapteur</p>
    <p><strong>Z :</strong> @CapteurViewModel.SelectedCapteurDetail.ZCapteur</p>

    <h3>Unitée</h3>
    @if (CapteurViewModel.SelectedCapteurDetail.Unites?.Count > 0)
    {
        <ul>
            @foreach (var unite in CapteurViewModel.SelectedCapteurDetail.Unites)
            {
                <li>@unite.NomUnite</li>
                <button class="btn btn-danger" @onclick="() => DeleteUniteCapteur(unite.IdUnite, CapteurViewModel.SelectedCapteurDetail.IdCapteur)">Supprimer</button>
            }
        </ul>
    }
    else
    {
        <p><em>Aucune unitée</em></p>
    }

    <h3>Mur</h3>
    @if (CapteurViewModel.SelectedCapteurDetail.Mur != null)
    {
        <p><strong>Hauteur : </strong><li>@CapteurViewModel.SelectedCapteurDetail.Mur.Hauteur</li></p>
        <p><strong>Longueur : </strong><li>@CapteurViewModel.SelectedCapteurDetail.Mur.Longueur</li></p>
        <p><strong>Orientation : </strong><li>@CapteurViewModel.SelectedCapteurDetail.Mur.Orientation</li></p>
    }
    else
    {
        <p><em>Le capteur n'est pas sur un mur</em></p>
    }

    <h3>Salle</h3>
    @if (CapteurViewModel.SelectedCapteurDetail.Salle != null)
    {
        <p><strong>Nom salle : </strong><li>@CapteurViewModel.SelectedCapteurDetail.Salle.NomSalle</li></p>
    }
    else
    {
        <p><em>Le capteur n'a pas de salle</em></p>
    }
} *@

@if (!string.IsNullOrEmpty(CapteurViewModel.ErrorMessage))
{
    <div class="alert alert-danger">
        @CapteurViewModel.ErrorMessage
    </div>
}

@code {
    private Modal formModal;

    private ConfirmDialog confirmSupprDialog = default!;
    List<ToastMessage> messages = new List<ToastMessage>();
    [Inject] ToastService ToastService { get; set; } = default!;

    private CapteurDTO capteurDeleteInConfirmation;

    private void Test(ChangeEventArgs e)
    {
        Console.WriteLine(e.Value.ToString());
    }

    protected override async Task OnInitializedAsync()
    {
        await CapteurViewModel.LoadCapteursAsync();
        await CapteurViewModel.LoadMursAsync();
    }

    private async void ClosePopup()
    {
        await formModal?.HideAsync();
    }

    private async void OpenPopup()
    {
        await formModal?.ShowAsync();
    }

    private async Task ViewDetails(int idCapteur)
    {
        //await CapteurViewModel.LoadCapteurDetailsAsync(idCapteur);
        Utils.Utils.GoDetail(NavigationManager, "capteurs", idCapteur);
        StateHasChanged();
    }

    private async Task EditCapteur(Client_SAE_5.DTO.CapteurDTO capteur)
    {
        await CapteurViewModel.LoadCapteurDetailsWithoutDefAsync(capteur.IdCapteur);
        OpenPopup();
    }

    private async Task AddNewCapteur()
    {
        await CapteurViewModel.SetupNewCapteur();
        OpenPopup();
    }

    private async Task SaveCapteur()
    {
        if (CapteurViewModel.newCapteur.IdCapteur == 0)
        {
            await CapteurViewModel.AddCapteurAsync();
        }
        else
        {
            await CapteurViewModel.UpdateCapteurAsync();
        }
        ClosePopup();
        StateHasChanged();
    }

    private async Task OpenDeleteConfirmation()
    {
        var options = new ConfirmDialogOptions
        {
            YesButtonText = "Supprimer",
            YesButtonColor = ButtonColor.Danger,
            NoButtonText = "Annuler",
            NoButtonColor = ButtonColor.Primary
        };

        var confirmation = await confirmSupprDialog.ShowAsync(
            title: "Confirmer la suppression du capteur",
            message1: "Êtes vous sûr de vouloir supprimer le capteur \"" + capteurDeleteInConfirmation.NomCapteur + "\" de la salle \"" + capteurDeleteInConfirmation.NomSalle + "\" ?",
            confirmDialogOptions: options);

        if (confirmation)
        {
            await DeleteCapteur(capteurDeleteInConfirmation.IdCapteur);
            ToastService.Notify(new ToastMessage(ToastType.Success, $"Le capteur a été supprimé avec succès"));
        }
    }

    private async Task BeginDeleteConfirmation(CapteurDTO capteurToConfirmDeletion)
    {
        capteurDeleteInConfirmation = capteurToConfirmDeletion;
        OpenDeleteConfirmation();
    }

    private async Task DeleteCapteur(int idCapteur)
    {
        await CapteurViewModel.DeleteCapteurAsync(idCapteur);
        StateHasChanged();
    }

    private void CancelEdit()
    {
        ClosePopup();
        CapteurViewModel.AvailableUnites.Clear();
    }

    private async Task AddUniteCapteur(int idCapteur, object idUnite)
    {
        if (idUnite is int idUniteInt || (idUnite is string strValue && int.TryParse(strValue, out idUniteInt)))
        {
            if (idUniteInt > 0)
            {
                await CapteurViewModel.AddUniteCapteurAsync(idCapteur, idUniteInt);
            }
        }
    }

    private async Task DeleteUniteCapteur(int idUnite, int idCapteur)
    {
        await CapteurViewModel.DeleteUniteCapteurAsync(idUnite, idCapteur);
    }
}
