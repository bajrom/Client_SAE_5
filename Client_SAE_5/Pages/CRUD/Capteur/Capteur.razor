@page "/crud/capteurs"
@inject Client_SAE_5.ViewModel.CapteurViewModel CapteurViewModel
@inject NavigationManager NavigationManager

<Toasts class="p-3" Messages="messages" AutoHide="true" Delay="5000" Placement="ToastsPlacement.TopRight" />

<PageTitle>Gestion des Capteurs</PageTitle>

<h1>Gestion des Capteurs</h1>

<button class="btn btn-success" @onclick="() => AddNewCapteur()">Ajouter un capteur</button>
<br />
<br />
@if (CapteurViewModel.DBData.Capteurs == null || CapteurViewModel.DBData.Capteurs.Count == 0)
{
    <Spinner></Spinner>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Nom</th>
                <th>Salle</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var capteur in CapteurViewModel.DBData.Capteurs)
            {
                <tr class="selection" @onclick="() => ViewDetails(capteur.IdCapteur)">
                    <td>@capteur.NomCapteur</td>
                    <td>@capteur.NomSalle</td>
                    <td>
                        <button class="btn btn-primary" @onclick="() => EditCapteur(capteur)" @onclick:stopPropagation><Icon Name="IconName.PencilFill"></Icon></button>
                        <button class="btn btn-danger" @onclick="() => BeginDeleteConfirmation(capteur)" @onclick:stopPropagation><Icon Name="IconName.Trash3Fill"></Icon></button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}


<!-- Modale pour l'édition -->
<Modal @ref="formModal" Size="ModalSize.Large" Title="Renseignement des informations du capteur">
    <BodyTemplate>
        @if (!string.IsNullOrEmpty(CapteurViewModel.ErrorMessage))
        {
            <div class="alert alert-danger">
                @CapteurViewModel.ErrorMessage
            </div>
        }

        <div>
            <label>Nom :</label>
            <input type="text" @bind="CapteurViewModel.CapteurInEdition.NomCapteur" class="form-control" />

            <label>Est actif ? :</label>
                <label>OUI</label>
                <input type="radio" checked="@(CapteurViewModel.CapteurInEdition.EstActif == "OUI")"
                       @onchange="@(() => CapteurViewModel.CapteurInEdition.EstActif = "OUI")" />
                <label>NON</label>
                <input type="radio" checked="@(CapteurViewModel.CapteurInEdition.EstActif == "NON")"
                       @onchange="@(() => CapteurViewModel.CapteurInEdition.EstActif = "NON")" />
                <label>NSP</label>
                <input type="radio" checked="@(CapteurViewModel.CapteurInEdition.EstActif == "NSP")"
                       @onchange="@(() => CapteurViewModel.CapteurInEdition.EstActif = "NSP")" />
            <br/>

            <label>X :</label>
            <input type="number" @bind="CapteurViewModel.CapteurInEdition.XCapteur" class="form-control" />

            <label>Y :</label>
            <input type="number" @bind="CapteurViewModel.CapteurInEdition.YCapteur" class="form-control" />

            <label>Z :</label>
            <input type="number" @bind="CapteurViewModel.CapteurInEdition.ZCapteur" class="form-control" />

            <label>Salle :</label>
            <select @bind="CapteurViewModel.CapteurInEditionNomSalleSelected" class="form-control">
                @if (string.IsNullOrEmpty(CapteurViewModel.CapteurInEditionNomSalleSelected))
                {
                    <option value="">-- Sélectionnez une salle --</option>
                }
                @foreach (string nomSalle in CapteurViewModel.NomSalles)
                {
                    <option value="@nomSalle">@nomSalle</option>
                }
            </select>


            @if (!string.IsNullOrEmpty(CapteurViewModel.CapteurInEditionNomSalleSelected))
            {
                <label>Mur :</label>
                <select @bind="CapteurViewModel.CapteurInEdition.Mur.IdMur" class="form-control">
                    @if (CapteurViewModel.CapteurInEditionNomSalleSelected != CapteurViewModel.CapteurInEdition.Salle.NomSalle || CapteurViewModel.CapteurInEdition.Mur.IdMur == 0)
                    {
                        <option selected value="0">--- Sélectionnez un mur ---</option>
                    }
                    @foreach (var mur in CapteurViewModel.DBData.Murs.Where(m => m.NomSalle == CapteurViewModel.CapteurInEditionNomSalleSelected))
                    {
                        @if (mur.IdMur == CapteurViewModel.CapteurInEditionOldMurId)
                        {
                            <option selected value="@mur.IdMur">Mur @mur.Direction orienté @Math.Round(mur.Orientation)° salle @mur.NomSalle</option>
                        }
                        else
                        {
                            <option value="@mur.IdMur">Mur @mur.Direction orienté @Math.Round(mur.Orientation)° salle @mur.NomSalle</option>
                        }
                    }
                </select>
            }

            <label>Unités :</label>
            <div id="divUnitesCapteur">
                @foreach (var unite in CapteurViewModel.DBData.Unites)
                {
                    <div class="form-check">
                        <label class="form-check-label">@unite.NomUnite (@unite.SigleUnite)</label>
                        <input value="@unite.IdUnite" type="checkbox" class="form-check-input" checked="@CapteurViewModel.CapteurInEdition.Unites.Any(u => u.IdUnite == unite.IdUnite)" @onchange="(e) => CapteurViewModel.ChangeSelectedUnites(unite, (bool)e.Value)" />
                    </div>
                }
            </div>

        </div>
    </BodyTemplate>
    <FooterTemplate>
        <button class="btn btn-secondary" @onclick="CancelEdit">Annuler</button>
        @if (CapteurViewModel.CapteurInEdition.IdCapteur == 0)
        {
            <button class="btn btn-success" @onclick="SaveCapteur">Ajouter</button>
        }
        else
        {
            <button class="btn btn-primary" @onclick="SaveCapteur">Modifier</button>
        }
    </FooterTemplate>
</Modal>

<ConfirmDialog @ref="confirmSupprDialog" />

@code {
    private Modal formModal;

    private ConfirmDialog confirmSupprDialog = default!;
    List<ToastMessage> messages = new List<ToastMessage>();
    [Inject] ToastService ToastService { get; set; } = default!;

    private CapteurDTO? capteurDeleteInConfirmation;

    protected override async Task OnInitializedAsync()
    {
        if (CapteurViewModel.DBData.Capteurs == null || CapteurViewModel.DBData.Capteurs.Count == 0)
        {
            await CapteurViewModel.LoadCapteursAsync();
        }
    }

    private async void ClosePopup()
    {
        CapteurViewModel.ResetError();
        await formModal.HideAsync();
    }

    private async void OpenPopup()
    {
        await formModal.ShowAsync();
    }

    private void ViewDetails(int idCapteur)
    {
        Utils.Utils.GoDetail(NavigationManager, "capteurs", idCapteur);
        StateHasChanged();
    }

    private async Task EditCapteur(CapteurDTO capteur)
    {
        await CapteurViewModel.SetupCapteurEdition(capteur.IdCapteur);
        OpenPopup();
    }

    private async Task AddNewCapteur()
    {
        await CapteurViewModel.SetupNewCapteur();
        OpenPopup();
    }

    private async Task SaveCapteur()
    {
        if (CapteurViewModel.CapteurInEdition.IdCapteur == 0)
        {
            await CapteurViewModel.AddCapteurAsync();
        }
        else
        {
            await CapteurViewModel.UpdateCapteurAsync();
        }

        if (string.IsNullOrEmpty(CapteurViewModel.ErrorMessage))
        {
            ClosePopup();
            StateHasChanged();
        }
    }

    private async Task OpenDeleteConfirmation()
    {
        var options = new ConfirmDialogOptions
        {
            YesButtonText = "Supprimer",
            YesButtonColor = ButtonColor.Danger,
            NoButtonText = "Annuler",
            NoButtonColor = ButtonColor.Primary
        };

        if (capteurDeleteInConfirmation == null)
        {
            throw new ArgumentNullException("Le capteur dont on veut récupérer la confirmation de suppression est NULL.");
        }

        var confirmation = await confirmSupprDialog.ShowAsync(
            title: "Confirmer la suppression du capteur",
            message1: "Êtes vous sûr de vouloir supprimer le capteur \"" + capteurDeleteInConfirmation.NomCapteur + "\" de la salle \"" + capteurDeleteInConfirmation.NomSalle + "\" ?",
            confirmDialogOptions: options);

        if (confirmation)
        {
            await DeleteCapteur(capteurDeleteInConfirmation.IdCapteur);
            ToastService.Notify(new ToastMessage(ToastType.Success, $"Le capteur a été supprimé avec succès"));
        }
    }

    private async Task BeginDeleteConfirmation(CapteurDTO capteurToConfirmDeletion)
    {
        capteurDeleteInConfirmation = capteurToConfirmDeletion;
        await OpenDeleteConfirmation();
    }

    private async Task DeleteCapteur(int idCapteur)
    {
        await CapteurViewModel.DeleteCapteurAsync(idCapteur);
        StateHasChanged();
    }

    private void CancelEdit()
    {
        ClosePopup();
        CapteurViewModel.AvailableUnites.Clear();
    }
}
