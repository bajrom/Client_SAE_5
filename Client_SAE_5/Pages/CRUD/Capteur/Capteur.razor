@page "/crud/capteurs"
@inject Client_SAE_5.ViewModel.CapteurViewModel CapteurViewModel
@inject NavigationManager NavigationManager

<link rel="stylesheet" href="css/CapteurStyle.css" />
<Toasts class="p-3" Messages="messages" AutoHide="true" Delay="5000" Placement="ToastsPlacement.TopRight" />

<PageTitle>Gestion des Capteurs</PageTitle>

<h1>Gestion des Capteurs</h1>

<button class="btn btn-success" @onclick="() => AddNewCapteur()">Ajouter un capteur</button>
<br />
<br />

@if (CapteurViewModel.DBData.Capteurs == null || CapteurViewModel.DBData.Capteurs.Count == 0)
{
    <div class="d-flex justify-content-center">
        <Spinner Type="SpinnerType.Border" Size="SpinnerSize.ExtraLarge" />
    </div>
}
else
{
    <Grid @ref="capteurGrid"
          TItem="CapteurDTO"
          DataProvider="CapteursDataProvider"
          AllowFiltering="true"
          AllowPaging="true"
          PageSize="10"
          AllowSorting="true"
          FiltersTranslationProvider="Utils.BlazorBootstrapUtils.Instance.GridFiltersTranslationProvider"
          Class="table table-hover table-bordered"
          Responsive="true"
          AllowSelection="false"
          OnRowClick="ViewDetails"
          AllowRowClick="true"
          PaginationItemsTextFormat="{0} - {1} sur {2} capteurs"
          ItemsPerPageText="Capteurs par page"
          EmptyText="Aucun capteur trouvé"
          EnumFilterSelectText="Selection">
        <GridColumns>
            <GridColumn TItem="CapteurDTO" HeaderText="Nom" PropertyName="NomCapteur" SortKeySelector="item => item.NomCapteur">
                @context.NomCapteur
            </GridColumn>
            <GridColumn TItem="CapteurDTO" HeaderText="Salle" PropertyName="NomSalle" SortKeySelector="item => item.NomSalle">
                @context.NomSalle
            </GridColumn>
            <GridColumn TItem="CapteurDTO" HeaderText="Actions" Filterable="false">
                <button class="btn btn-primary" title="Modifier @context.NomCapteur" @onclick="() => EditCapteur(context)" @onclick:stopPropagation>
                    <Icon Name="IconName.PencilFill" />
                </button>
                <button class="btn btn-danger" title="Supprimer @context.NomCapteur" @onclick="() => BeginDeleteConfirmation(context)" @onclick:stopPropagation>
                    <Icon Name="IconName.Trash3Fill" />
                </button>
            </GridColumn>
        </GridColumns>
    </Grid>
}

<!-- Modale pour l'édition -->
<Modal @ref="formModal" Size="ModalSize.Large" Title="Renseignement des informations du capteur">
    <BodyTemplate>
        @if (!string.IsNullOrEmpty(CapteurViewModel.ErrorMessage))
        {
            <div class="alert alert-danger">
                @CapteurViewModel.ErrorMessage
            </div>
        }

        <div id="formCapteur">
            <div class="formCapteurGroup" id="formLeftGroup">
                <section>
                    <label>Nom :</label>
                    <input type="text" @bind="CapteurViewModel.CapteurInEdition.NomCapteur" class="form-control" maxlength="25" />
                </section>

                <section>
                    <label>Etat :</label>
                    <div id="radioButtonFlex">
                        <div>
                            <input type="radio" checked="@(CapteurViewModel.CapteurInEdition.EstActif == "OUI")"
                                   @onchange="@(() => CapteurViewModel.CapteurInEdition.EstActif = "OUI")" />
                            <label>Actif</label>
                        </div>
                        <div>
                            <input type="radio" checked="@(CapteurViewModel.CapteurInEdition.EstActif == "NON")"
                                   @onchange="@(() => CapteurViewModel.CapteurInEdition.EstActif = "NON")" />
                            <label>Inactif</label>
                        </div>
                        <div>
                            <input type="radio" checked="@(CapteurViewModel.CapteurInEdition.EstActif == "NSP")"
                                   @onchange="@(() => CapteurViewModel.CapteurInEdition.EstActif = "NSP")" />
                            <label>Inconnu</label>
                        </div>
                    </div>
                </section>

                <section>
                    <label>
                        Position X (en cm)
                        <Tooltip Class="me-4" Title="Distance par rapport à la longueur du mur en partant de la gauche" Placement="TooltipPlacement.Right">
                            <Icon Name="IconName.InfoCircleFill"></Icon>
                        </Tooltip>
                    </label>
                    <input type="number" @bind="CapteurViewModel.CapteurInEdition.XCapteur" class="form-control" min="0"/>
                </section>

                <section>
                    <label>
                        Position Y (en cm)
                        <Tooltip Class="me-4" Title="Distance par rapport à la hauteur du mur en partant du haut" Placement="TooltipPlacement.Right">
                            <Icon Name="IconName.InfoCircleFill"></Icon>
                        </Tooltip>
                    </label>
                    <input type="number" @bind="CapteurViewModel.CapteurInEdition.YCapteur" class="form-control" min="0"/>
                </section>

                <section>
                    <label>
                        Position Z (en cm)
                        <Tooltip Class="me-4" Title="Distance du mur le plus proche / de référence" Placement="TooltipPlacement.Right">
                            <Icon Name="IconName.InfoCircleFill"></Icon>
                        </Tooltip>
                    </label>
                    <input type="number" @bind="CapteurViewModel.CapteurInEdition.ZCapteur" class="form-control" min="0"/>
                </section>


                <section>
                    <label>Salle :</label>
                    <select @bind="CapteurViewModel.CapteurInEditionNomSalleSelected" class="form-control">
                        @if (string.IsNullOrEmpty(CapteurViewModel.CapteurInEditionNomSalleSelected))
                        {
                            <option value="">-- Sélectionnez une salle --</option>
                        }
                        @foreach (string nomSalle in CapteurViewModel.NomSalles)
                        {
                            <option value="@nomSalle">@nomSalle</option>
                        }
                    </select>
                </section>


              
            </div>

            <div class="formCapteurGroup" id="formRightGroup">
                <section>
                    <label>Unités :</label>
                    <div id="divUnitesCapteur">
                        @foreach (var unite in CapteurViewModel.DBData.Unites)
                        {
                            <div class="form-check">
                                <input value="@unite.IdUnite"
                                       type="checkbox"
                                       class="form-check-input"
                                       checked="@CapteurViewModel.CapteurInEdition.Unites.Any(u => u.IdUnite == unite.IdUnite)"
                                       @onchange="(e) => CapteurViewModel.ChangeSelectedUnites(unite, (bool)e.Value)" />
                                <label class="form-check-label">
                                    @unite.NomUnite @("" + (unite.SigleUnite != null ? "(" + unite.SigleUnite + ")" : ""))
                                </label>
                            </div>
                        }
                    </div>
                </section>

                @if (!string.IsNullOrEmpty(CapteurViewModel.CapteurInEditionNomSalleSelected))
                {
                    <section>
                        <label>Mur :</label>
                        <select class="form-control" @onchange="HandleChange">
                            @if (CapteurViewModel.CapteurInEditionNomSalleSelected != CapteurViewModel.CapteurInEdition.Salle.NomSalle || CapteurViewModel.CapteurInEdition.Mur.IdMur == 0)
                            {
                                <option selected value="0">--- Sélectionnez un mur ---</option>
                            }
                            @foreach (var mur in CapteurViewModel.DBData.Murs.Where(m => m.NomSalle == CapteurViewModel.CapteurInEditionNomSalleSelected))
                            {
                                @if (mur.IdMur == CapteurViewModel.CapteurInEditionOldMurId)
                                {
                                    <option selected value="@mur.IdMur">Mur @mur.Direction orienté @Math.Round(mur.Orientation)° salle @mur.NomSalle</option>
                                }
                                else
                                {
                                    <option value="@mur.IdMur">Mur @mur.Direction orienté @Math.Round(mur.Orientation)° salle @mur.NomSalle</option>
                                }
                            }
                        </select>
                    </section>
                }
            </div>
        </div>
    </BodyTemplate>
    <FooterTemplate>
        <button class="btn btn-secondary" @onclick="CancelEdit">Annuler</button>
            @if (isMurLoading)
            {
                <Spinner Type="SpinnerType.Border" Size="SpinnerSize.Small" />
            }
            @if (CapteurViewModel.CapteurInEdition.IdCapteur == 0)
            {
                <button class="btn btn-success" @onclick="SaveCapteur" disabled="@isMurLoading">Ajouter</button>
            }
            else
            {
            <button class="btn btn-primary" @onclick="SaveCapteur" disabled="@isMurLoading">Modifier</button>
            }
    </FooterTemplate>
</Modal>

<ConfirmDialog @ref="confirmSupprDialog" />

@code {
    private Modal formModal;
    private Grid<CapteurDTO> capteurGrid;

    private ConfirmDialog confirmSupprDialog = default!;
    List<ToastMessage> messages = new List<ToastMessage>();
    [Inject] ToastService ToastService { get; set; } = default!;

    private CapteurDTO? capteurDeleteInConfirmation;
    bool isMurLoading = false;

    /// <summary>
    /// Méthode exécutée lors de l'initialisation de la page
    /// </summary>
    protected override async Task OnInitializedAsync()
    {
        if (CapteurViewModel.DBData.Capteurs == null || CapteurViewModel.DBData.Capteurs.Count == 0)
        {
            await CapteurViewModel.LoadCapteursAsync();
        }
    }

    /// <summary>
    /// Permet de fermer la pop up de façon asynchrone
    /// <see cref="formModal"/>
    /// </summary>
    private async Task ClosePopup()
    {
        CapteurViewModel.ResetError();
        await formModal.HideAsync();
    }

    /// <summary>
    /// Permet d'ouvrir la pop up de façon asynchrone
    /// </summary>
    private async Task OpenPopup()
    {
        await formModal.ShowAsync();
    }

    /// <summary>
    /// Permet de naviguer sur la page de détails d'un capteur à partir de la grille de capteurs
    /// </summary>
    /// <param name="args">Ligne de la GRID</param>
    private void ViewDetails(GridRowEventArgs<CapteurDTO> args)
    {
        Utils.Utils.GoDetail(NavigationManager, "capteurs", args.Item.IdCapteur);
        StateHasChanged();
    }

    /// <summary>
    /// Permet d'ajouter un nouveau capteur de façon asynchrone
    /// </summary>
    private async Task AddNewCapteur()
    {
        await CapteurViewModel.SetupNewCapteur();
        await OpenPopup();
    }

    /// <summary>
    /// Permet d'éditer un capteur de façon asynchrone
    /// </summary>
    /// <param name="capteur">Capteur DTO à éditer</param>
    private async Task EditCapteur(CapteurDTO capteur)
    {
        await CapteurViewModel.SetupCapteurEdition(capteur.IdCapteur);
        await OpenPopup();
    }

    /// <summary>
    /// Permet de sauvegarder un capteur une fois qu'il a été ajouté ou modifié
    /// </summary>
    private async Task SaveCapteur()
    {
        string confirmMessage = "";

        if (CapteurViewModel.CapteurInEdition.IdCapteur == 0)
        {
            await CapteurViewModel.AddCapteurAsync();
            confirmMessage = "Ajout du capteur avec succès !";
        }
        else
        {
            await CapteurViewModel.UpdateCapteurAsync();
            confirmMessage = "Modification du capteur avec succès !";
        }

        if (string.IsNullOrEmpty(CapteurViewModel.ErrorMessage))
        {
            await ClosePopup();
            ToastService.Notify(new ToastMessage(ToastType.Success, confirmMessage));
            await RefreshGridAsync(); // Rafraîchir la GRID après une modification
        }
    }

    /// <summary>
    /// Permet de démarrer la suppression d'un capteur
    /// </summary>
    /// <param name="capteur">Capteur (DTO) à supprimer</param>
    private async Task BeginDeleteConfirmation(CapteurDTO capteur)
    {
        capteurDeleteInConfirmation = capteur;
        await OpenDeleteConfirmation();
    }

    /// <summary>
    /// Permet de supprimer un capteur, selon son ID, de façon asynchrone
    /// </summary>
    /// <param name="idCapteur">ID du capteur à supprimer</param>
    private async Task DeleteCapteur(int idCapteur)
    {
        await CapteurViewModel.DeleteCapteurAsync(idCapteur);
        await RefreshGridAsync();
    }

    /// <summary>
    /// Ouvrir la fenêtre de confirmation de suppression d'un capteur
    /// </summary>
    /// <exception cref="ArgumentNullException"></exception>
    private async Task OpenDeleteConfirmation()
    {
        var options = new ConfirmDialogOptions
            {
                YesButtonText = "Supprimer",
                YesButtonColor = ButtonColor.Danger,
                NoButtonText = "Annuler",
                NoButtonColor = ButtonColor.Primary
            };

        if (capteurDeleteInConfirmation == null)
        {
            throw new ArgumentNullException("Le capteur dont on veut récupérer la confirmation de suppression est NULL.");
        }

        var confirmation = await confirmSupprDialog.ShowAsync(
            title: "Confirmer la suppression du capteur",
            message1: "Êtes vous sûr de vouloir supprimer le capteur \"" + capteurDeleteInConfirmation.NomCapteur + "\" de la salle \"" + capteurDeleteInConfirmation.NomSalle + "\" ?",
            confirmDialogOptions: options);

        if (confirmation)
        {
            await DeleteCapteur(capteurDeleteInConfirmation.IdCapteur);
            ToastService.Notify(new ToastMessage(ToastType.Success, $"Le capteur a été supprimé avec succès"));
        }
    }

    /// <summary>
    /// Rafraîchit la grille de capteurs de façon asynchrone
    /// </summary>
    /// <see cref="capteurGrid"></see>
    /// <exception cref="NullReferenceException"></exception>
    private async Task RefreshGridAsync()
    {
        if (capteurGrid != null)
        {
            await capteurGrid.RefreshDataAsync();
        } else
        {
            throw new NullReferenceException("La grille de capteurs n'a pas été trouvé, est null.");
        }
    }

    /// <summary>
    /// Permet de récupérer les données nécéssaires pour remplir la grille de capteurs
    /// </summary>
    /// <param name="request">Requête d'ajout</param>
    private async Task<GridDataProviderResult<CapteurDTO>> CapteursDataProvider(GridDataProviderRequest<CapteurDTO> request)
    {
        // Application des filtres, tri et pagination
        var data = request.ApplyTo(CapteurViewModel.DBData.Capteurs);
        return await Task.FromResult(data);
    }

    /// <summary>
    /// Annule la modification d'un capteur
    /// </summary>
    private async Task CancelEdit()
    {
        await ClosePopup();
        CapteurViewModel.AvailableUnites.Clear();
    }

    /// <summary>
    /// Change le mur sélectionner et prend ses détails
    /// </summary>
    /// <param name="e">Arguments</param>
    private async Task HandleChange(ChangeEventArgs e)
    {
        isMurLoading = true;
        await CapteurViewModel.ChangeMur(int.Parse(e.Value.ToString()));
        isMurLoading = false;
        StateHasChanged();
    }
}