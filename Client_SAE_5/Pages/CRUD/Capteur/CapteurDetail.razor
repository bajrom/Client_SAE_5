@page "/crud/capteurs/{idCapteur:int}"
@inject Client_SAE_5.ViewModel.CapteurViewModel CapteurViewModel
@inject NavigationManager NavigationManager

<link rel="stylesheet" href="css/CapteurStyle.css" />
<link rel="stylesheet" href="css/DetailPages.css" />

<PageTitle>Détails du Capteur</PageTitle>

<h1>Détails du Capteur</h1>

<div id="mainContainer">
@if (CapteurViewModel.SelectedCapteurDetail == null)
{
        <p id="chargementPageContainer"><Spinner></Spinner> <p id="texteChargementDetail">Détails du capteur en chargement...</p></p>
}
else
{
    <div>
        <h3>Informations générales</h3>
        <p><strong>Nom :</strong> @CapteurViewModel.SelectedCapteurDetail.NomCapteur</p>
        <p><strong>Etat:</strong> @(Utils.Utils.RenderEtatContent(CapteurViewModel.SelectedCapteurDetail.EstActif))</p>

        <br />
        <h3>Localisation</h3>
        <h5 class="murInfo listeCliquable" @onclick='(e=>Utils.Utils.GoDetail(NavigationManager, "salles", CapteurViewModel.SelectedCapteurDetail.Salle.IdSalle))'>
            Salle: @(CapteurViewModel.SelectedCapteurDetail.Salle.NomSalle)
        </h5>
        <h5 class="murInfo listeCliquable" @onclick='(e=>Utils.Utils.GoDetail(NavigationManager, "murs", CapteurViewModel.SelectedCapteurDetail.Mur.IdMur))'>
            Mur: @(Math.Round(CapteurViewModel.SelectedCapteurDetail.Mur.Orientation, 2))°
        </h5>

        <br />
        <h4>Unités</h4>
        @if (CapteurViewModel.SelectedCapteurDetail.Unites?.Count > 0)
        {
            <ul>
                @foreach (var unite in CapteurViewModel.SelectedCapteurDetail.Unites)
                {
                    <li class="d-flex flex-row listeUnites">
                        <button class="btn btn-danger btn-sm" @onclick="() => DeleteUniteLinkWithCapteur(unite.IdUnite, CapteurViewModel.SelectedCapteurDetail.IdCapteur)">
                            <Icon Name="IconName.Trash3Fill"></Icon>
                        </button>
                        <p class="listeCliquable" @onclick='(e=>Utils.Utils.GoDetail(NavigationManager, "unites", unite.IdUnite))'>
                            @unite.NomUnite
                        </p>
                    </li>
                }
            </ul>
        }
        else
        {
                <p><em>Ca capteur ne mesure aucune unitée. <a href="/crud/unites">Voulez-vous en rajouter un ?</a></em></p>
        }
    </div>

    @if (CapteurViewModel.SelectedCapteurDetail.Mur == null || CapteurViewModel.SelectedCapteurDetail == null)
    {
        <p><em>Aucun détail disponible pour la position de ce capteur.</em></p>
    }
    else
    {
        <span>
            <h1>Position du capteur sur le mur</h1>
            <a href="/crud/murs/@(CapteurViewModel.SelectedCapteurDetail.Mur.IdMur)">
                <div id="cadreMur" style="width: @(MurLargeurPx + "px"); height: @(MurHauteurPx + "px");">
                    <div style="@GetCapteurPositionStyle(CapteurViewModel.SelectedCapteurDetail)"
                         title="Positions: (@CapteurViewModel.SelectedCapteurDetail.XCapteur cm; @CapteurViewModel.SelectedCapteurDetail.YCapteur cm; @CapteurViewModel.SelectedCapteurDetail.ZCapteur cm)">
                    </div>
                </div>
            </a>
            <p>
                <strong>Coordonnées</strong>
                    <Tooltip Class="me-4" Title="À partir d'en haut à gauche" Placement="TooltipPlacement.Right">
                    <Icon Name="IconName.InfoCircleFill"></Icon>
                </Tooltip>
                (X:@(CapteurViewModel.SelectedCapteurDetail.XCapteur/100)m)
                (Y:@(CapteurViewModel.SelectedCapteurDetail.YCapteur/100)m)
            </p> 
        </span>
            
    }
    
    
}
</div>

<button class="btn btn-secondary" @onclick="Retour">Retour</button>

@if (!string.IsNullOrEmpty(CapteurViewModel.ErrorMessage))
{
    <div class="alert alert-danger">
        @CapteurViewModel.ErrorMessage
    </div>
}

@code {
    [Parameter]
    public int IdCapteur { get; set; }

    // Dimensions du mur en cm (valeurs récupérées depuis le ViewModel ou DTO)
    private decimal MurLongueurCm => CapteurViewModel.SelectedCapteurDetail.Mur.Longueur; // Exemple : 600 cm
    private decimal MurHauteurCm => CapteurViewModel.SelectedCapteurDetail.Mur.Hauteur;  // Exemple : 300 cm

    // Dimensions du mur affiché en pixels
    private const int MurLargeurPx = 600; // Largeur en pixels (à ajuster selon l'interface)
    private const int MurHauteurPx = 300; // Hauteur en pixels (à ajuster selon l'interface)

    // Échelle pour convertir cm -> pixels
    private decimal ScaleX => MurLargeurPx / MurLongueurCm; // Pixels par cm en largeur
    private decimal ScaleY => MurHauteurPx / MurHauteurCm; // Pixels par cm en hauteur

    /// <summary>
    /// Permet de récupérer la chaîne de caractère correspondant à la position du capteur en pixels par les attributs left et top, à ajouter au style CSS.
    /// </summary>
    /// <param name="capteur">Capteur dont on veut les coordonnées CSS top et left</param>
    /// <returns>Style CSS correspondant aux attributs left et top du carré capteur</returns>
    private string GetCapteurPositionStyle(CapteurDetailDTO capteur)
    {
        if (CapteurViewModel.SelectedCapteurDetail.Mur == null) return "";

        // Convertir les coordonnées en pixels
        decimal leftPx = capteur.XCapteur * ScaleX;
        decimal topPx = capteur.YCapteur * ScaleY;

        // Retourner le style CSS avec les positions normalisées
        return $"left: {leftPx.ToString(System.Globalization.CultureInfo.InvariantCulture)}px; " +
               $"top: {topPx.ToString(System.Globalization.CultureInfo.InvariantCulture)}px;";
    }

    /// <summary>
    /// Méthode exécutée lors de l'initialisation de la page permettant de charger les détails du capteur visualisé
    /// </summary>
    protected override async Task OnInitializedAsync()
    {
        await CapteurViewModel.LoadCapteurDetailsAsync(IdCapteur);
    }

    /// <summary>
    /// Permet de supprimer les unités liées à un capteur
    /// </summary>
    /// <param name="idUnite">ID de l'unité lié au capteur à supprimer</param>
    /// <param name="idCapteur">ID du capteur lié à cette unité</param>
    /// <exception cref="ArgumentException"/>
    private async Task DeleteUniteLinkWithCapteur(int idUnite, int idCapteur)
    {
        if (idUnite < 0 || idCapteur < 0)
        {
            throw new ArgumentException("L'ID du capteur ou de l'unité ne peut pas être négatif!");
        }

        await CapteurViewModel.DeleteUniteCapteurAsync(idUnite, idCapteur);
        StateHasChanged();
    }

    /// <summary>
    /// Permet de retourner vers la page précédente
    /// </summary>
    private void Retour()
    {
        NavigationManager.NavigateTo("/crud/capteurs");
    }
}
