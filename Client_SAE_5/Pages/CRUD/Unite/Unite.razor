@page "/crud/unites"
@inject Client_SAE_5.ViewModel.UniteViewModel UniteViewModel
@inject NavigationManager NavigationManager

<Toasts class="p-3" Messages="messages" AutoHide="true" Delay="5000" Placement="ToastsPlacement.TopRight" />

<PageTitle>Gestion des unités</PageTitle>

<h1>Gestion des unités</h1>

<button class="btn btn-success" @onclick="() => AddNewUnite()">Ajouter une unité</button>
<br />
<br />

@if (UniteViewModel.DBData.Unites == null || UniteViewModel.DBData.Unites.Count == 0)
{
    <div class="d-flex justify-content-center">
        <Spinner Type="SpinnerType.Border" Size="SpinnerSize.ExtraLarge" />
    </div>
}
else
{
    <Grid @ref="uniteGrid"
          TItem="UniteDTO"
          DataProvider="UnitesDataProvider"
          AllowFiltering="true"
          AllowPaging="true"
          PageSize="10"
          AllowSorting="true"
          FiltersTranslationProvider="Utils.BlazorBootstrapUtils.Instance.GridFiltersTranslationProvider"
          Class="table table-hover table-bordered"
          Responsive="true"
          AllowSelection="false"
          OnRowClick="ViewDetails"
          AllowRowClick="true"
          PaginationItemsTextFormat="{0} - {1} sur {2} unités"
          ItemsPerPageText="Unités par page"
          EmptyText="Aucune unité trouvée"
          EnumFilterSelectText="Selection">
        <GridColumns>
            <GridColumn TItem="UniteDTO" HeaderText="Nom" PropertyName="NomUnite" SortKeySelector="item => item.NomUnite">
                @context.NomUnite
            </GridColumn>
            <GridColumn TItem="UniteDTO" HeaderText="Sigle" PropertyName="SigleUnite" SortKeySelector="item => item.SigleUnite">
                @context.SigleUnite
            </GridColumn>
            <GridColumn TItem="UniteDTO" HeaderText="Actions" Filterable="false">
                <button class="btn btn-primary" title="Modifier @context.NomUnite" @onclick="() => EditUnite(context)" @onclick:stopPropagation>
                    <Icon Name="IconName.PencilFill" />
                </button>
                <button class="btn btn-danger" title="Supprimer @context.NomUnite" @onclick="() => BeginDeleteConfirmation(context)" @onclick:stopPropagation>
                    <Icon Name="IconName.Trash3Fill" />
                </button>
            </GridColumn>
        </GridColumns>
    </Grid>
}

<!-- Modale pour l'édition -->
<Modal @ref="formModal" Size="ModalSize.Large" Title="Renseignement des informations de l'unité">
    <BodyTemplate>
        @if (!string.IsNullOrEmpty(UniteViewModel.ErrorMessage))
        {
            <div class="alert alert-danger">
                @UniteViewModel.ErrorMessage
            </div>
        }
        <div>
            <label>Nom :</label>
            <input type="text" @bind="UniteViewModel.UniteInEdition.NomUnite" class="form-control" />

            <label>Sigle :</label>
            <Tooltip Class="me-4" Title="Annotation raccourci de l'unité" Placement="TooltipPlacement.Right">
                <Icon Name="IconName.InfoCircleFill"></Icon>
            </Tooltip>
            <input type="text" @bind="UniteViewModel.UniteInEdition.SigleUnite" class="form-control" />
        </div>
    </BodyTemplate>
    <FooterTemplate>
        <button class="btn btn-secondary" @onclick="ClosePopup">Annuler</button>
        @if (UniteViewModel.UniteInEdition.IdUnite == 0)
        {
            <button class="btn btn-success" @onclick="SaveUnite">Ajouter</button>
        }
        else
        {
            <button class="btn btn-primary" @onclick="SaveUnite">Modifier</button>
        }
    </FooterTemplate>
</Modal>

<ConfirmDialog @ref="confirmSupprDialog" />

@code {
    private Modal formModal;
    private Grid<UniteDTO> uniteGrid;

    private ConfirmDialog confirmSupprDialog = default!;
    List<ToastMessage> messages = new List<ToastMessage>();
    [Inject] ToastService ToastService { get; set; } = default!;

    private UniteDTO? uniteDeleteInConfirmation;

    protected override async Task OnInitializedAsync()
    {
        if (UniteViewModel.DBData.Unites == null || UniteViewModel.DBData.Unites.Count == 0)
        {
            await UniteViewModel.LoadUnitesAsync();
        }
    }

    private async void ClosePopup()
    {
        UniteViewModel.ResetError();
        await formModal.HideAsync();
    }

    private async void OpenPopup()
    {
        await formModal.ShowAsync();
    }

    private void ViewDetails(GridRowEventArgs<UniteDTO> args)
    {
        Utils.Utils.GoDetail(NavigationManager, "unites", args.Item.IdUnite);
        StateHasChanged();
    }

    private async Task AddNewUnite()
    {
        await UniteViewModel.SetupNewUnite();
        OpenPopup();
    }

    private async Task EditUnite(UniteDTO unite)
    {
        await UniteViewModel.SetupUniteEdition(unite.IdUnite);
        OpenPopup();
    }

    private async Task SaveUnite()
    {
        string confirmMessage = "";

        if (UniteViewModel.UniteInEdition.IdUnite == 0)
        {
            await UniteViewModel.AddUniteAsync();
            confirmMessage = "Ajout de l'unite avec succès !";
        }
        else
        {
            await UniteViewModel.UpdateUniteAsync();
            confirmMessage = "Modification de l'unite avec succès !";
        }

        if (string.IsNullOrEmpty(UniteViewModel.ErrorMessage))
        {
            ClosePopup();
            ToastService.Notify(new ToastMessage(ToastType.Success, confirmMessage));
            await RefreshGridAsync(); // Rafraîchir la GRID après une modification
        }
    }

    private async Task BeginDeleteConfirmation(UniteDTO unite)
    {
        uniteDeleteInConfirmation = unite;
        await OpenDeleteConfirmation();
    }

    private async Task DeleteUnite(int idUnite)
    {
        await UniteViewModel.DeleteUniteAsync(idUnite);
        await RefreshGridAsync(); // Rafraîchir la GRID après une suppression
    }

    private async Task OpenDeleteConfirmation()
    {
        var options = new ConfirmDialogOptions
            {
                YesButtonText = "Supprimer",
                YesButtonColor = ButtonColor.Danger,
                NoButtonText = "Annuler",
                NoButtonColor = ButtonColor.Primary
            };

        if (uniteDeleteInConfirmation == null)
        {
            throw new ArgumentNullException("L'unité dont on veut récupérer la confirmation de suppression est NULL.");
        }

        var confirmation = await confirmSupprDialog.ShowAsync(
            title: "Confirmer la suppression de l'unité",
            message1: "Êtes vous sûr de vouloir supprimer l'unité \"" + uniteDeleteInConfirmation.NomUnite + " (" + uniteDeleteInConfirmation.SigleUnite + ") ?",
            confirmDialogOptions: options);

        if (confirmation)
        {
            await DeleteUnite(uniteDeleteInConfirmation.IdUnite);
            ToastService.Notify(new ToastMessage(ToastType.Success, $"L'unité a été supprimée avec succès"));
        }
    }

    private async Task RefreshGridAsync()
    {
        if (uniteGrid != null)
        {
            await uniteGrid.RefreshDataAsync(); // Rafraîchir la GRID
        }
    }

    private async Task<GridDataProviderResult<UniteDTO>> UnitesDataProvider(GridDataProviderRequest<UniteDTO> request)
    {
        // Application des filtres, tri et pagination
        var data = request.ApplyTo(UniteViewModel.DBData.Unites);
        return await Task.FromResult(data);
    }
}