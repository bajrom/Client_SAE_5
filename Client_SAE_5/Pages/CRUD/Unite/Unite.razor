@page "/crud/unites"
@inject Client_SAE_5.ViewModel.UniteViewModel UniteViewModel

<PageTitle>Gestion des unitées</PageTitle>

<h1>Gestion des unitées</h1>

@if (UniteViewModel.Unites == null || UniteViewModel.Unites.Count == 0)
{
    <Spinner></Spinner>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Nom</th>
                <th>Sigle</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var unite in UniteViewModel.Unites)
            {
                <tr>
                    <td>@unite.NomUnite</td>
                    <td>@unite.SigleUnite</td>
                    <td>
                        <button class="btn btn-info" @onclick="() => ViewDetails(unite.IdUnite)">Détails</button>
                        <button class="btn btn-primary" @onclick="() => EditUnite(unite)">Modifier</button>
                        <button class="btn btn-danger" @onclick="() => DeleteUnite(unite.IdUnite)">Supprimer</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@if (UniteViewModel.SelectedUniteDetails != null)
{
    <h2>Détails de la Salle</h2>
    <p><strong>Nom :</strong> @UniteViewModel.SelectedUniteDetails.NomUnite</p>
    <p><strong>Sigle :</strong> @UniteViewModel.SelectedUniteDetails.SigleUnite</p>

    <h3>Capteurs</h3>
    @if (UniteViewModel.SelectedUniteDetails.Capteurs?.Count > 0)
    {
        <ul>
            @foreach (var capteur in UniteViewModel.SelectedUniteDetails.Capteurs)
            {
                <li>@capteur.NomCapteur</li>
            }
        </ul>
    }
    else
    {
        <p><em>Aucun capteur attribuer</em></p>
    }
}

<h2>Ajouter ou Modifier une unitée</h2>
<div>
    <label>Nom :</label>
    <input type="text" @bind="UniteViewModel.EditableUnite.NomUnite" class="form-control" />

    <label>Sigle :</label>
    <input type="text" @bind="UniteViewModel.EditableUnite.SigleUnite" class="form-control" />

    <button class="btn btn-success" @onclick="SaveUnite">Enregistrer</button>
    <button class="btn btn-secondary" @onclick="CancelEdit">Annuler</button>
</div>

@if (!string.IsNullOrEmpty(UniteViewModel.ErrorMessage))
{
    <div class="alert alert-danger">
        @UniteViewModel.ErrorMessage
    </div>
}

@code {
    protected override async Task OnInitializedAsync()
    {
        await UniteViewModel.LoadUnitesAsync();
    }

    private async Task ViewDetails(int idUnite)
    {
        await UniteViewModel.LoadUniteDetailsAsync(idUnite);
    }

    private async Task EditUnite(Client_SAE_5.DTO.UniteDTO unite)
    {
        var temp = await UniteViewModel.LoadUniteDetailsWithoutDefAsync(unite.IdUnite);
        UniteViewModel.EditUnite(temp);
    }

    private async Task SaveUnite()
    {
        if (UniteViewModel.EditableUnite.IdUnite == 0)
        {
            await UniteViewModel.AddUniteAsync();
        }
        else
        {
            await UniteViewModel.UpdateUniteAsync();
        }
        UniteViewModel.EditableUnite = new Client_SAE_5.DTO.UniteDTO(); // Réinitialiser
    }

    private async Task DeleteUnite(int idUnite)
    {
        await UniteViewModel.DeleteUniteAsync(idUnite);
    }

    private void CancelEdit()
    {
        UniteViewModel.EditableUnite = new Client_SAE_5.DTO.UniteDTO();
    }
}
