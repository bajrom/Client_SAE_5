@page "/crud/unites"
@inject Client_SAE_5.ViewModel.UniteViewModel UniteViewModel
@inject NavigationManager NavigationManager

<PageTitle>Gestion des unités</PageTitle>

<h1>Gestion des unités</h1>

<button class="btn btn-success" @onclick="() => AddNewUnite()">Ajouter une unite</button>
<br />
<br />
@if (UniteViewModel.DBData.Unites == null || UniteViewModel.DBData.Unites.Count == 0)
{
    <Spinner></Spinner>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Nom</th>
                <th>Sigle</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var unite in UniteViewModel.DBData.Unites)
            {
                <tr class="selection" @onclick="() => ViewDetails(unite.IdUnite)">
                    <td>@unite.NomUnite</td>
                    <td>@unite.SigleUnite</td>
                    <td>
                        <button class="btn btn-primary" @onclick="() => EditUnite(unite)" @onclick:stopPropagation><Icon Name="IconName.PencilFill"></Icon></button>
                        <button class="btn btn-danger" @onclick="() => BeginDeleteConfirmation(unite)" @onclick:stopPropagation><Icon Name="IconName.Trash3Fill"></Icon></button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}



<!-- Modale pour l'édition -->
<Modal @ref="formModal" Size="ModalSize.Large" Title="Renseignement des informations de l'unite'">
    <BodyTemplate>
        @if (!string.IsNullOrEmpty(UniteViewModel.ErrorMessage))
        {
            <div class="alert alert-danger">
                @UniteViewModel.ErrorMessage
            </div>
        }
        <div>
            <label>Nom :</label>
            <input type="text" @bind="UniteViewModel.UniteInEdition.NomUnite" class="form-control" />

            <label>Sigle :</label>
            <input type="text" @bind="UniteViewModel.UniteInEdition.SigleUnite" class="form-control" />
        </div>
    </BodyTemplate>
    <FooterTemplate>
        <button class="btn btn-secondary" @onclick="ClosePopup">Annuler</button>
        @if (UniteViewModel.UniteInEdition.IdUnite == 0)
        {
            <button class="btn btn-success" @onclick="SaveUnite">Ajouter</button>
        }
        else
        {
            <button class="btn btn-primary" @onclick="SaveUnite">Modifier</button>
        }
    </FooterTemplate>
</Modal>

<ConfirmDialog @ref="confirmSupprDialog" />

@code {
    private Modal formModal;

    private ConfirmDialog confirmSupprDialog = default!;
    List<ToastMessage> messages = new List<ToastMessage>();
    [Inject] ToastService ToastService { get; set; } = default!;

    private UniteDTO? uniteDeleteInConfirmation;


    protected override async Task OnInitializedAsync()
    {
        if (UniteViewModel.DBData.Unites == null || UniteViewModel.DBData.Unites.Count == 0)
        {
            await UniteViewModel.LoadUnitesAsync();
        }
    }

    private async void ClosePopup()
    {
        UniteViewModel.ResetError();
        await formModal.HideAsync();
    }

    private async void OpenPopup()
    {
        await formModal.ShowAsync();
    }

    private void ViewDetails(int idUnite)
    {
        Utils.Utils.GoDetail(NavigationManager, "unites", idUnite);
        StateHasChanged();
    }

    private async Task AddNewUnite()
    {
        await UniteViewModel.SetupNewUnite();
        OpenPopup();
    }

    private async Task EditUnite(Client_SAE_5.DTO.UniteDTO unite)
    {
        await UniteViewModel.SetupUniteEdition(unite.IdUnite);
        OpenPopup();
    }

    private async Task SaveUnite()
    {
        if (UniteViewModel.UniteInEdition.IdUnite == 0)
        {
            await UniteViewModel.AddUniteAsync();
        }
        else
        {
            await UniteViewModel.UpdateUniteAsync();
        }

        if (string.IsNullOrEmpty(UniteViewModel.ErrorMessage))
        {
            ClosePopup();
            StateHasChanged();
        }
    }

    private async Task OpenDeleteConfirmation()
    {
        var options = new ConfirmDialogOptions
            {
                YesButtonText = "Supprimer",
                YesButtonColor = ButtonColor.Danger,
                NoButtonText = "Annuler",
                NoButtonColor = ButtonColor.Primary
            };

        if (uniteDeleteInConfirmation == null)
        {
            throw new ArgumentNullException("L'unite dont on veut récupérer la confirmation de suppression est NULL.");
        }

        var confirmation = await confirmSupprDialog.ShowAsync(
            title: "Confirmer la suppression de l'unite",
            message1: "Êtes vous sûr de vouloir supprimer l'unite \"" + uniteDeleteInConfirmation.NomUnite + " (" + uniteDeleteInConfirmation.SigleUnite + ") ?",
            confirmDialogOptions: options);

        if (confirmation)
        {
            await DeleteUnite(uniteDeleteInConfirmation.IdUnite);
            ToastService.Notify(new ToastMessage(ToastType.Success, $"L'unite a été supprimée avec succès"));
        }
    }

    private async Task BeginDeleteConfirmation(UniteDTO UniteToConfirmDeletion)
    {
        uniteDeleteInConfirmation = UniteToConfirmDeletion;
        await OpenDeleteConfirmation();
    }

    private async Task DeleteUnite(int idUnite)
    {
        await UniteViewModel.DeleteUniteAsync(idUnite);
        StateHasChanged();
    }
}
