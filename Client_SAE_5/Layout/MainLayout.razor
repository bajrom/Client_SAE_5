@inherits LayoutComponentBase
@inject NavigationManager NavigationManager

<link rel="stylesheet" href="css/LayoutStyle.css" />

<div class="page">

    @if (GetMenuSection(NavigationManager.Uri) == "crud")
    {
        <div class="sidebar">
            <NavMenu />
        </div>
    }
    <main>
        <div class="d-flex flex-row justify-content-between" style="background-color:#ff914d">
            <div class="header-container d-flex align-items-center position-relative" style="background-color:#ff914d">
                <div class="logo-container d-flex gap-3">
                    <NavLink class="nav-link align-items-center" href="/">
                        <img src="/images/datacare.png" alt="Logo" class="logo" />
                    </NavLink>
                </div>
                <h3 style="margin:0px;">
                    DataCare
                </h3>
            </div>
            <div class="header-container d-flex align-items-center position-relative justify-content-end" style="background-color:#ff914d">
                        @foreach (var menuItem in menuItems)
                        {
                            <a class="mainMenuOption"
                               href="@menuItem.Link"
                               style="@menuItem.Style"
                               @onmouseover="() => ChangeHoverStyle(menuItem, true)"
                               @onmouseout="() => ChangeHoverStyle(menuItem, false)">
                                @menuItem.Text
                            </a>
                        }
            </div>
        </div>
        <article class="content px-4">
            @Body
        </article>
    </main>
</div>

@code {
    /// <summary>
    /// Permet de récupérer le menu source. Exemple: /crud/batiment retourne crud ou /grafana retourne grafana.
    /// </summary>
    /// <param name="uri">URL à vérifier</param>
    /// <returns>Le premier élément</returns>
    private String? GetMenuSection(String? uri)
    {
        if (String.IsNullOrEmpty(uri))
        {
            throw new ArgumentNullException("L'URL fourni est incorrect");
        }

        String relativePath = NavigationManager.ToBaseRelativePath(uri);
        String[] segments = relativePath.Split('/', StringSplitOptions.RemoveEmptyEntries);
        return segments.Length > 0 ? segments[0] : String.Empty;
    }

    private List<MenuItem> menuItems = new List<MenuItem>
    {
        new MenuItem("Gestion CRUD", "/crud/capteurs"),
        new MenuItem("Grafana", "/grafana"),
        new MenuItem("Alarme", "/alarme"),
        new MenuItem("Visualisation 3D", "/visu3D"),
        new MenuItem("Données capteurs", "/influxdb"),
    };

    private void ChangeHoverStyle(MenuItem menuItem, bool isHovered)
    {
        if (isHovered)
        {
            menuItem.Style = $@"
                background-color: #4DBBFF; /* Couleur secondaire */
                color: black; /* Texte noir au survol */
                padding: 15px 20px;
                text-align: center;
                text-decoration: none;
                display: inline-block;
                font-size: 16px;
                font-weight: bold;
                transition: all 0.3s ease-in-out;
            ";
        }
        else
        {
            menuItem.Style = DefaultStyle;
        }
    }

    private const string DefaultStyle = @"
        background-color: #ff914d; /* Couleur principale */
        color: white;
        padding: 15px 20px;
        text-align: center;
        text-decoration: none;
        display: inline-block;
        font-size: 16px;
        font-weight: bold;
        transition: all 0.3s ease-in-out; /* Transition fluide */
    ";

    private class MenuItem
    {
        public string Text { get; }
        public string Link { get; }
        public string Style { get; set; }

        public MenuItem(string text, string link)
        {
            Text = text;
            Link = link;
            Style = DefaultStyle;
        }
    }
}

